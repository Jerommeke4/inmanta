Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> main
Rule 1     main -> top_stmt main
Rule 2     main -> top_stmt
Rule 3     top_stmt -> mls
Rule 4     top_stmt -> entity_def
Rule 5     top_stmt -> implement_def
Rule 6     top_stmt -> implementation_def
Rule 7     top_stmt -> relation
Rule 8     top_stmt -> statement
Rule 9     top_stmt -> typedef
Rule 10    top_stmt -> index
Rule 11    statement -> assign
Rule 12    statement -> constructor
Rule 13    statement -> function_call
Rule 14    statement -> for
Rule 15    stmt_list -> statement stmt_list
Rule 16    stmt_list -> statement
Rule 17    assign -> var_ref = operand
Rule 18    for -> FOR ID IN operand implementation
Rule 19    entity_def -> ENTITY CID : entity_body_outer
Rule 20    entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer
Rule 21    entity_body_outer -> mls entity_body END
Rule 22    entity_body_outer -> entity_body END
Rule 23    entity_body_outer -> END
Rule 24    entity_body_outer -> mls END
Rule 25    entity_body -> entity_body attr
Rule 26    entity_body -> attr
Rule 27    attr -> ns_ref ID
Rule 28    attr -> ns_ref ID = constant
Rule 29    implement_def -> IMPLEMENT class_ref USING ns_list
Rule 30    implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition
Rule 31    implementation_def -> IMPLEMENTATION ID FOR class_ref implementation
Rule 32    implementation_def -> IMPLEMENTATION ID implementation
Rule 33    implementation -> : mls stmt_list END
Rule 34    implementation -> : stmt_list END
Rule 35    implementation -> : END
Rule 36    relation -> class_ref ID multi REL multi class_ref ID
Rule 37    multi -> [ INT ]
Rule 38    multi -> [ INT : ]
Rule 39    multi -> [ INT : INT ]
Rule 40    multi -> [ : INT ]
Rule 41    typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX
Rule 42    typedef -> TYPEDEF ID AS ns_ref MATCHING condition
Rule 43    typedef -> TYPEDEF CID AS constructor
Rule 44    index -> INDEX class_ref ( id_list )
Rule 45    condition -> ( condition )
Rule 46    condition -> operand CMP_OP operand
Rule 47    condition -> operand IN list_def
Rule 48    condition -> operand IN var_ref
Rule 49    condition -> condition AND condition
Rule 50    condition -> condition OR condition
Rule 51    condition -> function_call
Rule 52    condition -> NOT condition
Rule 53    condition -> TRUE
Rule 54    condition -> FALSE
Rule 55    operand -> constant
Rule 56    operand -> function_call
Rule 57    operand -> constructor
Rule 58    operand -> list_def
Rule 59    operand -> var_ref
Rule 60    operand -> index_lookup
Rule 61    constructor -> class_ref ( param_list )
Rule 62    constructor -> class_ref ( )
Rule 63    function_call -> ns_ref ( )
Rule 64    function_call -> ns_ref ( operand_list )
Rule 65    list_def -> [ operand_list ]
Rule 66    index_lookup -> class_ref [ param_list ]
Rule 67    constant -> INT
Rule 68    constant -> FLOAT
Rule 69    constant -> mls
Rule 70    constant -> <empty>
Rule 71    constant -> REGEX
Rule 72    constant -> TRUE
Rule 73    constant -> FALSE
Rule 74    constant -> STRING
Rule 75    param_list -> ID = operand , param_list
Rule 76    param_list -> ID = operand
Rule 77    operand_list -> operand , operand_list
Rule 78    operand_list -> operand
Rule 79    ns_list -> ns_ref , ns_list
Rule 80    ns_list -> ns_ref
Rule 81    var_ref -> var_ref . ID
Rule 82    var_ref -> ns_ref
Rule 83    class_ref -> CID
Rule 84    class_ref -> ns_ref SEP CID
Rule 85    class_ref_list -> class_ref , class_ref_list
Rule 86    class_ref_list -> class_ref
Rule 87    ns_ref -> ns_ref SEP ID
Rule 88    ns_ref -> ID
Rule 89    id_list -> ID , id_list
Rule 90    id_list -> ID
Rule 91    mls -> MLS
Rule 92    mls -> MLS mls

Terminals, with rules where they appear

(                    : 44 45 61 62 63 64
)                    : 44 45 61 62 63 64
,                    : 75 77 79 85 89
.                    : 81
:                    : 19 20 33 34 35 38 39 40
=                    : 17 28 75 76
AND                  : 49
AS                   : 41 42 43
CID                  : 19 20 43 83 84
CMP_OP               : 46
END                  : 21 22 23 24 33 34 35
ENTITY               : 19 20
EXTENDS              : 20
FALSE                : 54 73
FLOAT                : 68
FOR                  : 18 31
ID                   : 18 27 28 31 32 36 36 41 42 75 76 81 87 88 89 90
IMPLEMENT            : 29 30
IMPLEMENTATION       : 31 32
IN                   : 18 47 48
INDEX                : 44
INT                  : 37 38 39 39 40 67
MATCHING             : 41 42
MLS                  : 91 92
NOT                  : 52
OR                   : 50
REGEX                : 41 71
REL                  : 36
SEP                  : 84 87
STRING               : 74
TRUE                 : 53 72
TYPEDEF              : 41 42 43
USING                : 29 30
WHEN                 : 30
[                    : 37 38 39 40 65 66
]                    : 37 38 39 40 65 66
error                : 

Nonterminals, with rules where they appear

assign               : 11
attr                 : 25 26
class_ref            : 29 30 31 36 36 44 61 62 66 85 86
class_ref_list       : 20 85
condition            : 30 42 45 49 49 50 50 52
constant             : 28 55
constructor          : 12 43 57
entity_body          : 21 22 25
entity_body_outer    : 19 20
entity_def           : 4
for                  : 14
function_call        : 13 51 56
id_list              : 44 89
implement_def        : 5
implementation       : 18 31 32
implementation_def   : 6
index                : 10
index_lookup         : 60
list_def             : 47 58
main                 : 1 0
mls                  : 3 21 24 33 69 92
multi                : 36 36
ns_list              : 29 30 79
ns_ref               : 27 28 41 42 63 64 79 80 82 84 87
operand              : 17 18 46 46 47 48 75 76 77 78
operand_list         : 64 65 77
param_list           : 61 66 75
relation             : 7
statement            : 8 15 16
stmt_list            : 15 33 34
top_stmt             : 1 2
typedef              : 9
var_ref              : 17 48 59 81

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . top_stmt main
    (2) main -> . top_stmt
    (3) top_stmt -> . mls
    (4) top_stmt -> . entity_def
    (5) top_stmt -> . implement_def
    (6) top_stmt -> . implementation_def
    (7) top_stmt -> . relation
    (8) top_stmt -> . statement
    (9) top_stmt -> . typedef
    (10) top_stmt -> . index
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (19) entity_def -> . ENTITY CID : entity_body_outer
    (20) entity_def -> . ENTITY CID EXTENDS class_ref_list : entity_body_outer
    (29) implement_def -> . IMPLEMENT class_ref USING ns_list
    (30) implement_def -> . IMPLEMENT class_ref USING ns_list WHEN condition
    (31) implementation_def -> . IMPLEMENTATION ID FOR class_ref implementation
    (32) implementation_def -> . IMPLEMENTATION ID implementation
    (36) relation -> . class_ref ID multi REL multi class_ref ID
    (11) statement -> . assign
    (12) statement -> . constructor
    (13) statement -> . function_call
    (14) statement -> . for
    (41) typedef -> . TYPEDEF ID AS ns_ref MATCHING REGEX
    (42) typedef -> . TYPEDEF ID AS ns_ref MATCHING condition
    (43) typedef -> . TYPEDEF CID AS constructor
    (44) index -> . INDEX class_ref ( id_list )
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (17) assign -> . var_ref = operand
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (18) for -> . FOR ID IN operand implementation
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref

    MLS             shift and go to state 26
    ENTITY          shift and go to state 20
    IMPLEMENT       shift and go to state 4
    IMPLEMENTATION  shift and go to state 5
    TYPEDEF         shift and go to state 18
    INDEX           shift and go to state 13
    CID             shift and go to state 21
    FOR             shift and go to state 14
    ID              shift and go to state 15

    main                           shift and go to state 17
    ns_ref                         shift and go to state 2
    for                            shift and go to state 3
    function_call                  shift and go to state 1
    implement_def                  shift and go to state 19
    typedef                        shift and go to state 6
    var_ref                        shift and go to state 22
    mls                            shift and go to state 16
    relation                       shift and go to state 7
    statement                      shift and go to state 8
    class_ref                      shift and go to state 9
    implementation_def             shift and go to state 10
    constructor                    shift and go to state 11
    top_stmt                       shift and go to state 12
    index                          shift and go to state 23
    entity_def                     shift and go to state 24
    assign                         shift and go to state 25

state 1

    (13) statement -> function_call .

    MLS             reduce using rule 13 (statement -> function_call .)
    ENTITY          reduce using rule 13 (statement -> function_call .)
    IMPLEMENT       reduce using rule 13 (statement -> function_call .)
    IMPLEMENTATION  reduce using rule 13 (statement -> function_call .)
    TYPEDEF         reduce using rule 13 (statement -> function_call .)
    INDEX           reduce using rule 13 (statement -> function_call .)
    CID             reduce using rule 13 (statement -> function_call .)
    FOR             reduce using rule 13 (statement -> function_call .)
    ID              reduce using rule 13 (statement -> function_call .)
    $end            reduce using rule 13 (statement -> function_call .)
    END             reduce using rule 13 (statement -> function_call .)


state 2

    (84) class_ref -> ns_ref . SEP CID
    (63) function_call -> ns_ref . ( )
    (64) function_call -> ns_ref . ( operand_list )
    (87) ns_ref -> ns_ref . SEP ID
    (82) var_ref -> ns_ref .

    SEP             shift and go to state 28
    (               shift and go to state 27
    =               reduce using rule 82 (var_ref -> ns_ref .)
    .               reduce using rule 82 (var_ref -> ns_ref .)


state 3

    (14) statement -> for .

    MLS             reduce using rule 14 (statement -> for .)
    ENTITY          reduce using rule 14 (statement -> for .)
    IMPLEMENT       reduce using rule 14 (statement -> for .)
    IMPLEMENTATION  reduce using rule 14 (statement -> for .)
    TYPEDEF         reduce using rule 14 (statement -> for .)
    INDEX           reduce using rule 14 (statement -> for .)
    CID             reduce using rule 14 (statement -> for .)
    FOR             reduce using rule 14 (statement -> for .)
    ID              reduce using rule 14 (statement -> for .)
    $end            reduce using rule 14 (statement -> for .)
    END             reduce using rule 14 (statement -> for .)


state 4

    (29) implement_def -> IMPLEMENT . class_ref USING ns_list
    (30) implement_def -> IMPLEMENT . class_ref USING ns_list WHEN condition
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    CID             shift and go to state 21
    ID              shift and go to state 15

    class_ref                      shift and go to state 30
    ns_ref                         shift and go to state 29

state 5

    (31) implementation_def -> IMPLEMENTATION . ID FOR class_ref implementation
    (32) implementation_def -> IMPLEMENTATION . ID implementation

    ID              shift and go to state 31


state 6

    (9) top_stmt -> typedef .

    MLS             reduce using rule 9 (top_stmt -> typedef .)
    ENTITY          reduce using rule 9 (top_stmt -> typedef .)
    IMPLEMENT       reduce using rule 9 (top_stmt -> typedef .)
    IMPLEMENTATION  reduce using rule 9 (top_stmt -> typedef .)
    TYPEDEF         reduce using rule 9 (top_stmt -> typedef .)
    INDEX           reduce using rule 9 (top_stmt -> typedef .)
    CID             reduce using rule 9 (top_stmt -> typedef .)
    FOR             reduce using rule 9 (top_stmt -> typedef .)
    ID              reduce using rule 9 (top_stmt -> typedef .)
    $end            reduce using rule 9 (top_stmt -> typedef .)


state 7

    (7) top_stmt -> relation .

    MLS             reduce using rule 7 (top_stmt -> relation .)
    ENTITY          reduce using rule 7 (top_stmt -> relation .)
    IMPLEMENT       reduce using rule 7 (top_stmt -> relation .)
    IMPLEMENTATION  reduce using rule 7 (top_stmt -> relation .)
    TYPEDEF         reduce using rule 7 (top_stmt -> relation .)
    INDEX           reduce using rule 7 (top_stmt -> relation .)
    CID             reduce using rule 7 (top_stmt -> relation .)
    FOR             reduce using rule 7 (top_stmt -> relation .)
    ID              reduce using rule 7 (top_stmt -> relation .)
    $end            reduce using rule 7 (top_stmt -> relation .)


state 8

    (8) top_stmt -> statement .

    MLS             reduce using rule 8 (top_stmt -> statement .)
    ENTITY          reduce using rule 8 (top_stmt -> statement .)
    IMPLEMENT       reduce using rule 8 (top_stmt -> statement .)
    IMPLEMENTATION  reduce using rule 8 (top_stmt -> statement .)
    TYPEDEF         reduce using rule 8 (top_stmt -> statement .)
    INDEX           reduce using rule 8 (top_stmt -> statement .)
    CID             reduce using rule 8 (top_stmt -> statement .)
    FOR             reduce using rule 8 (top_stmt -> statement .)
    ID              reduce using rule 8 (top_stmt -> statement .)
    $end            reduce using rule 8 (top_stmt -> statement .)


state 9

    (36) relation -> class_ref . ID multi REL multi class_ref ID
    (61) constructor -> class_ref . ( param_list )
    (62) constructor -> class_ref . ( )

    ID              shift and go to state 33
    (               shift and go to state 32


state 10

    (6) top_stmt -> implementation_def .

    MLS             reduce using rule 6 (top_stmt -> implementation_def .)
    ENTITY          reduce using rule 6 (top_stmt -> implementation_def .)
    IMPLEMENT       reduce using rule 6 (top_stmt -> implementation_def .)
    IMPLEMENTATION  reduce using rule 6 (top_stmt -> implementation_def .)
    TYPEDEF         reduce using rule 6 (top_stmt -> implementation_def .)
    INDEX           reduce using rule 6 (top_stmt -> implementation_def .)
    CID             reduce using rule 6 (top_stmt -> implementation_def .)
    FOR             reduce using rule 6 (top_stmt -> implementation_def .)
    ID              reduce using rule 6 (top_stmt -> implementation_def .)
    $end            reduce using rule 6 (top_stmt -> implementation_def .)


state 11

    (12) statement -> constructor .

    MLS             reduce using rule 12 (statement -> constructor .)
    ENTITY          reduce using rule 12 (statement -> constructor .)
    IMPLEMENT       reduce using rule 12 (statement -> constructor .)
    IMPLEMENTATION  reduce using rule 12 (statement -> constructor .)
    TYPEDEF         reduce using rule 12 (statement -> constructor .)
    INDEX           reduce using rule 12 (statement -> constructor .)
    CID             reduce using rule 12 (statement -> constructor .)
    FOR             reduce using rule 12 (statement -> constructor .)
    ID              reduce using rule 12 (statement -> constructor .)
    $end            reduce using rule 12 (statement -> constructor .)
    END             reduce using rule 12 (statement -> constructor .)


state 12

    (1) main -> top_stmt . main
    (2) main -> top_stmt .
    (1) main -> . top_stmt main
    (2) main -> . top_stmt
    (3) top_stmt -> . mls
    (4) top_stmt -> . entity_def
    (5) top_stmt -> . implement_def
    (6) top_stmt -> . implementation_def
    (7) top_stmt -> . relation
    (8) top_stmt -> . statement
    (9) top_stmt -> . typedef
    (10) top_stmt -> . index
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (19) entity_def -> . ENTITY CID : entity_body_outer
    (20) entity_def -> . ENTITY CID EXTENDS class_ref_list : entity_body_outer
    (29) implement_def -> . IMPLEMENT class_ref USING ns_list
    (30) implement_def -> . IMPLEMENT class_ref USING ns_list WHEN condition
    (31) implementation_def -> . IMPLEMENTATION ID FOR class_ref implementation
    (32) implementation_def -> . IMPLEMENTATION ID implementation
    (36) relation -> . class_ref ID multi REL multi class_ref ID
    (11) statement -> . assign
    (12) statement -> . constructor
    (13) statement -> . function_call
    (14) statement -> . for
    (41) typedef -> . TYPEDEF ID AS ns_ref MATCHING REGEX
    (42) typedef -> . TYPEDEF ID AS ns_ref MATCHING condition
    (43) typedef -> . TYPEDEF CID AS constructor
    (44) index -> . INDEX class_ref ( id_list )
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (17) assign -> . var_ref = operand
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (18) for -> . FOR ID IN operand implementation
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref

    $end            reduce using rule 2 (main -> top_stmt .)
    MLS             shift and go to state 26
    ENTITY          shift and go to state 20
    IMPLEMENT       shift and go to state 4
    IMPLEMENTATION  shift and go to state 5
    TYPEDEF         shift and go to state 18
    INDEX           shift and go to state 13
    CID             shift and go to state 21
    FOR             shift and go to state 14
    ID              shift and go to state 15

    main                           shift and go to state 34
    ns_ref                         shift and go to state 2
    for                            shift and go to state 3
    function_call                  shift and go to state 1
    implement_def                  shift and go to state 19
    typedef                        shift and go to state 6
    var_ref                        shift and go to state 22
    mls                            shift and go to state 16
    relation                       shift and go to state 7
    statement                      shift and go to state 8
    class_ref                      shift and go to state 9
    implementation_def             shift and go to state 10
    constructor                    shift and go to state 11
    top_stmt                       shift and go to state 12
    index                          shift and go to state 23
    entity_def                     shift and go to state 24
    assign                         shift and go to state 25

state 13

    (44) index -> INDEX . class_ref ( id_list )
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    CID             shift and go to state 21
    ID              shift and go to state 15

    class_ref                      shift and go to state 35
    ns_ref                         shift and go to state 29

state 14

    (18) for -> FOR . ID IN operand implementation

    ID              shift and go to state 36


state 15

    (88) ns_ref -> ID .

    (               reduce using rule 88 (ns_ref -> ID .)
    SEP             reduce using rule 88 (ns_ref -> ID .)
    .               reduce using rule 88 (ns_ref -> ID .)
    CMP_OP          reduce using rule 88 (ns_ref -> ID .)
    IN              reduce using rule 88 (ns_ref -> ID .)
    ,               reduce using rule 88 (ns_ref -> ID .)
    )               reduce using rule 88 (ns_ref -> ID .)
    ]               reduce using rule 88 (ns_ref -> ID .)
    =               reduce using rule 88 (ns_ref -> ID .)
    AND             reduce using rule 88 (ns_ref -> ID .)
    OR              reduce using rule 88 (ns_ref -> ID .)
    MLS             reduce using rule 88 (ns_ref -> ID .)
    ENTITY          reduce using rule 88 (ns_ref -> ID .)
    IMPLEMENT       reduce using rule 88 (ns_ref -> ID .)
    IMPLEMENTATION  reduce using rule 88 (ns_ref -> ID .)
    TYPEDEF         reduce using rule 88 (ns_ref -> ID .)
    INDEX           reduce using rule 88 (ns_ref -> ID .)
    CID             reduce using rule 88 (ns_ref -> ID .)
    FOR             reduce using rule 88 (ns_ref -> ID .)
    ID              reduce using rule 88 (ns_ref -> ID .)
    $end            reduce using rule 88 (ns_ref -> ID .)
    WHEN            reduce using rule 88 (ns_ref -> ID .)
    END             reduce using rule 88 (ns_ref -> ID .)
    MATCHING        reduce using rule 88 (ns_ref -> ID .)
    :               reduce using rule 88 (ns_ref -> ID .)


state 16

    (3) top_stmt -> mls .

    MLS             reduce using rule 3 (top_stmt -> mls .)
    ENTITY          reduce using rule 3 (top_stmt -> mls .)
    IMPLEMENT       reduce using rule 3 (top_stmt -> mls .)
    IMPLEMENTATION  reduce using rule 3 (top_stmt -> mls .)
    TYPEDEF         reduce using rule 3 (top_stmt -> mls .)
    INDEX           reduce using rule 3 (top_stmt -> mls .)
    CID             reduce using rule 3 (top_stmt -> mls .)
    FOR             reduce using rule 3 (top_stmt -> mls .)
    ID              reduce using rule 3 (top_stmt -> mls .)
    $end            reduce using rule 3 (top_stmt -> mls .)


state 17

    (0) S' -> main .



state 18

    (41) typedef -> TYPEDEF . ID AS ns_ref MATCHING REGEX
    (42) typedef -> TYPEDEF . ID AS ns_ref MATCHING condition
    (43) typedef -> TYPEDEF . CID AS constructor

    ID              shift and go to state 38
    CID             shift and go to state 37


state 19

    (5) top_stmt -> implement_def .

    MLS             reduce using rule 5 (top_stmt -> implement_def .)
    ENTITY          reduce using rule 5 (top_stmt -> implement_def .)
    IMPLEMENT       reduce using rule 5 (top_stmt -> implement_def .)
    IMPLEMENTATION  reduce using rule 5 (top_stmt -> implement_def .)
    TYPEDEF         reduce using rule 5 (top_stmt -> implement_def .)
    INDEX           reduce using rule 5 (top_stmt -> implement_def .)
    CID             reduce using rule 5 (top_stmt -> implement_def .)
    FOR             reduce using rule 5 (top_stmt -> implement_def .)
    ID              reduce using rule 5 (top_stmt -> implement_def .)
    $end            reduce using rule 5 (top_stmt -> implement_def .)


state 20

    (19) entity_def -> ENTITY . CID : entity_body_outer
    (20) entity_def -> ENTITY . CID EXTENDS class_ref_list : entity_body_outer

    CID             shift and go to state 39


state 21

    (83) class_ref -> CID .

    :               reduce using rule 83 (class_ref -> CID .)
    (               reduce using rule 83 (class_ref -> CID .)
    [               reduce using rule 83 (class_ref -> CID .)
    ,               reduce using rule 83 (class_ref -> CID .)
    ID              reduce using rule 83 (class_ref -> CID .)
    USING           reduce using rule 83 (class_ref -> CID .)


state 22

    (17) assign -> var_ref . = operand
    (81) var_ref -> var_ref . . ID

    =               shift and go to state 40
    .               shift and go to state 41


state 23

    (10) top_stmt -> index .

    MLS             reduce using rule 10 (top_stmt -> index .)
    ENTITY          reduce using rule 10 (top_stmt -> index .)
    IMPLEMENT       reduce using rule 10 (top_stmt -> index .)
    IMPLEMENTATION  reduce using rule 10 (top_stmt -> index .)
    TYPEDEF         reduce using rule 10 (top_stmt -> index .)
    INDEX           reduce using rule 10 (top_stmt -> index .)
    CID             reduce using rule 10 (top_stmt -> index .)
    FOR             reduce using rule 10 (top_stmt -> index .)
    ID              reduce using rule 10 (top_stmt -> index .)
    $end            reduce using rule 10 (top_stmt -> index .)


state 24

    (4) top_stmt -> entity_def .

    MLS             reduce using rule 4 (top_stmt -> entity_def .)
    ENTITY          reduce using rule 4 (top_stmt -> entity_def .)
    IMPLEMENT       reduce using rule 4 (top_stmt -> entity_def .)
    IMPLEMENTATION  reduce using rule 4 (top_stmt -> entity_def .)
    TYPEDEF         reduce using rule 4 (top_stmt -> entity_def .)
    INDEX           reduce using rule 4 (top_stmt -> entity_def .)
    CID             reduce using rule 4 (top_stmt -> entity_def .)
    FOR             reduce using rule 4 (top_stmt -> entity_def .)
    ID              reduce using rule 4 (top_stmt -> entity_def .)
    $end            reduce using rule 4 (top_stmt -> entity_def .)


state 25

    (11) statement -> assign .

    MLS             reduce using rule 11 (statement -> assign .)
    ENTITY          reduce using rule 11 (statement -> assign .)
    IMPLEMENT       reduce using rule 11 (statement -> assign .)
    IMPLEMENTATION  reduce using rule 11 (statement -> assign .)
    TYPEDEF         reduce using rule 11 (statement -> assign .)
    INDEX           reduce using rule 11 (statement -> assign .)
    CID             reduce using rule 11 (statement -> assign .)
    FOR             reduce using rule 11 (statement -> assign .)
    ID              reduce using rule 11 (statement -> assign .)
    $end            reduce using rule 11 (statement -> assign .)
    END             reduce using rule 11 (statement -> assign .)


state 26

    (91) mls -> MLS .
    (92) mls -> MLS . mls
    (91) mls -> . MLS
    (92) mls -> . MLS mls

  ! shift/reduce conflict for MLS resolved as shift
    ENTITY          reduce using rule 91 (mls -> MLS .)
    IMPLEMENT       reduce using rule 91 (mls -> MLS .)
    IMPLEMENTATION  reduce using rule 91 (mls -> MLS .)
    TYPEDEF         reduce using rule 91 (mls -> MLS .)
    INDEX           reduce using rule 91 (mls -> MLS .)
    CID             reduce using rule 91 (mls -> MLS .)
    FOR             reduce using rule 91 (mls -> MLS .)
    ID              reduce using rule 91 (mls -> MLS .)
    $end            reduce using rule 91 (mls -> MLS .)
    ,               reduce using rule 91 (mls -> MLS .)
    )               reduce using rule 91 (mls -> MLS .)
    END             reduce using rule 91 (mls -> MLS .)
    ]               reduce using rule 91 (mls -> MLS .)
    :               reduce using rule 91 (mls -> MLS .)
    CMP_OP          reduce using rule 91 (mls -> MLS .)
    IN              reduce using rule 91 (mls -> MLS .)
    AND             reduce using rule 91 (mls -> MLS .)
    OR              reduce using rule 91 (mls -> MLS .)
    MLS             shift and go to state 26

  ! MLS             [ reduce using rule 91 (mls -> MLS .) ]

    mls                            shift and go to state 42

state 27

    (63) function_call -> ns_ref ( . )
    (64) function_call -> ns_ref ( . operand_list )
    (77) operand_list -> . operand , operand_list
    (78) operand_list -> . operand
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 53
    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    ,               reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    TRUE            shift and go to state 43
    FALSE           shift and go to state 48
    STRING          shift and go to state 49
    [               shift and go to state 61
    MLS             shift and go to state 26
    ID              shift and go to state 15
    CID             shift and go to state 21

  ! )               [ reduce using rule 70 (constant -> .) ]

    var_ref                        shift and go to state 51
    operand_list                   shift and go to state 52
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    mls                            shift and go to state 47
    function_call                  shift and go to state 45
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 59
    constant                       shift and go to state 60

state 28

    (84) class_ref -> ns_ref SEP . CID
    (87) ns_ref -> ns_ref SEP . ID

    CID             shift and go to state 62
    ID              shift and go to state 63


state 29

    (84) class_ref -> ns_ref . SEP CID
    (87) ns_ref -> ns_ref . SEP ID

    SEP             shift and go to state 28


state 30

    (29) implement_def -> IMPLEMENT class_ref . USING ns_list
    (30) implement_def -> IMPLEMENT class_ref . USING ns_list WHEN condition

    USING           shift and go to state 64


state 31

    (31) implementation_def -> IMPLEMENTATION ID . FOR class_ref implementation
    (32) implementation_def -> IMPLEMENTATION ID . implementation
    (33) implementation -> . : mls stmt_list END
    (34) implementation -> . : stmt_list END
    (35) implementation -> . : END

    FOR             shift and go to state 65
    :               shift and go to state 67

    implementation                 shift and go to state 66

state 32

    (61) constructor -> class_ref ( . param_list )
    (62) constructor -> class_ref ( . )
    (75) param_list -> . ID = operand , param_list
    (76) param_list -> . ID = operand

    )               shift and go to state 69
    ID              shift and go to state 70

    param_list                     shift and go to state 68

state 33

    (36) relation -> class_ref ID . multi REL multi class_ref ID
    (37) multi -> . [ INT ]
    (38) multi -> . [ INT : ]
    (39) multi -> . [ INT : INT ]
    (40) multi -> . [ : INT ]

    [               shift and go to state 72

    multi                          shift and go to state 71

state 34

    (1) main -> top_stmt main .

    $end            reduce using rule 1 (main -> top_stmt main .)


state 35

    (44) index -> INDEX class_ref . ( id_list )

    (               shift and go to state 73


state 36

    (18) for -> FOR ID . IN operand implementation

    IN              shift and go to state 74


state 37

    (43) typedef -> TYPEDEF CID . AS constructor

    AS              shift and go to state 75


state 38

    (41) typedef -> TYPEDEF ID . AS ns_ref MATCHING REGEX
    (42) typedef -> TYPEDEF ID . AS ns_ref MATCHING condition

    AS              shift and go to state 76


state 39

    (19) entity_def -> ENTITY CID . : entity_body_outer
    (20) entity_def -> ENTITY CID . EXTENDS class_ref_list : entity_body_outer

    :               shift and go to state 77
    EXTENDS         shift and go to state 78


state 40

    (17) assign -> var_ref = . operand
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

  ! shift/reduce conflict for MLS resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CID resolved as shift
    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    ENTITY          reduce using rule 70 (constant -> .)
    IMPLEMENT       reduce using rule 70 (constant -> .)
    IMPLEMENTATION  reduce using rule 70 (constant -> .)
    TYPEDEF         reduce using rule 70 (constant -> .)
    INDEX           reduce using rule 70 (constant -> .)
    FOR             reduce using rule 70 (constant -> .)
    $end            reduce using rule 70 (constant -> .)
    END             reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    TRUE            shift and go to state 43
    FALSE           shift and go to state 48
    STRING          shift and go to state 49
    [               shift and go to state 61
    MLS             shift and go to state 26
    ID              shift and go to state 15
    CID             shift and go to state 21

  ! MLS             [ reduce using rule 70 (constant -> .) ]
  ! CID             [ reduce using rule 70 (constant -> .) ]
  ! ID              [ reduce using rule 70 (constant -> .) ]

    var_ref                        shift and go to state 51
    mls                            shift and go to state 47
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    function_call                  shift and go to state 45
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 79
    constant                       shift and go to state 60

state 41

    (81) var_ref -> var_ref . . ID

    ID              shift and go to state 80


state 42

    (92) mls -> MLS mls .

    MLS             reduce using rule 92 (mls -> MLS mls .)
    ENTITY          reduce using rule 92 (mls -> MLS mls .)
    IMPLEMENT       reduce using rule 92 (mls -> MLS mls .)
    IMPLEMENTATION  reduce using rule 92 (mls -> MLS mls .)
    TYPEDEF         reduce using rule 92 (mls -> MLS mls .)
    INDEX           reduce using rule 92 (mls -> MLS mls .)
    CID             reduce using rule 92 (mls -> MLS mls .)
    FOR             reduce using rule 92 (mls -> MLS mls .)
    ID              reduce using rule 92 (mls -> MLS mls .)
    $end            reduce using rule 92 (mls -> MLS mls .)
    ,               reduce using rule 92 (mls -> MLS mls .)
    )               reduce using rule 92 (mls -> MLS mls .)
    END             reduce using rule 92 (mls -> MLS mls .)
    ]               reduce using rule 92 (mls -> MLS mls .)
    :               reduce using rule 92 (mls -> MLS mls .)
    CMP_OP          reduce using rule 92 (mls -> MLS mls .)
    IN              reduce using rule 92 (mls -> MLS mls .)
    AND             reduce using rule 92 (mls -> MLS mls .)
    OR              reduce using rule 92 (mls -> MLS mls .)


state 43

    (72) constant -> TRUE .

    ,               reduce using rule 72 (constant -> TRUE .)
    )               reduce using rule 72 (constant -> TRUE .)
    END             reduce using rule 72 (constant -> TRUE .)
    ID              reduce using rule 72 (constant -> TRUE .)
    ]               reduce using rule 72 (constant -> TRUE .)
    MLS             reduce using rule 72 (constant -> TRUE .)
    ENTITY          reduce using rule 72 (constant -> TRUE .)
    IMPLEMENT       reduce using rule 72 (constant -> TRUE .)
    IMPLEMENTATION  reduce using rule 72 (constant -> TRUE .)
    TYPEDEF         reduce using rule 72 (constant -> TRUE .)
    INDEX           reduce using rule 72 (constant -> TRUE .)
    CID             reduce using rule 72 (constant -> TRUE .)
    FOR             reduce using rule 72 (constant -> TRUE .)
    $end            reduce using rule 72 (constant -> TRUE .)
    AND             reduce using rule 72 (constant -> TRUE .)
    OR              reduce using rule 72 (constant -> TRUE .)
    :               reduce using rule 72 (constant -> TRUE .)


state 44

    (68) constant -> FLOAT .

    CMP_OP          reduce using rule 68 (constant -> FLOAT .)
    IN              reduce using rule 68 (constant -> FLOAT .)
    ,               reduce using rule 68 (constant -> FLOAT .)
    )               reduce using rule 68 (constant -> FLOAT .)
    END             reduce using rule 68 (constant -> FLOAT .)
    ID              reduce using rule 68 (constant -> FLOAT .)
    ]               reduce using rule 68 (constant -> FLOAT .)
    MLS             reduce using rule 68 (constant -> FLOAT .)
    ENTITY          reduce using rule 68 (constant -> FLOAT .)
    IMPLEMENT       reduce using rule 68 (constant -> FLOAT .)
    IMPLEMENTATION  reduce using rule 68 (constant -> FLOAT .)
    TYPEDEF         reduce using rule 68 (constant -> FLOAT .)
    INDEX           reduce using rule 68 (constant -> FLOAT .)
    CID             reduce using rule 68 (constant -> FLOAT .)
    FOR             reduce using rule 68 (constant -> FLOAT .)
    $end            reduce using rule 68 (constant -> FLOAT .)
    AND             reduce using rule 68 (constant -> FLOAT .)
    OR              reduce using rule 68 (constant -> FLOAT .)
    :               reduce using rule 68 (constant -> FLOAT .)


state 45

    (56) operand -> function_call .

    MLS             reduce using rule 56 (operand -> function_call .)
    ENTITY          reduce using rule 56 (operand -> function_call .)
    IMPLEMENT       reduce using rule 56 (operand -> function_call .)
    IMPLEMENTATION  reduce using rule 56 (operand -> function_call .)
    TYPEDEF         reduce using rule 56 (operand -> function_call .)
    INDEX           reduce using rule 56 (operand -> function_call .)
    CID             reduce using rule 56 (operand -> function_call .)
    FOR             reduce using rule 56 (operand -> function_call .)
    ID              reduce using rule 56 (operand -> function_call .)
    $end            reduce using rule 56 (operand -> function_call .)
    END             reduce using rule 56 (operand -> function_call .)
    :               reduce using rule 56 (operand -> function_call .)
    ,               reduce using rule 56 (operand -> function_call .)
    )               reduce using rule 56 (operand -> function_call .)
    ]               reduce using rule 56 (operand -> function_call .)
    AND             reduce using rule 56 (operand -> function_call .)
    OR              reduce using rule 56 (operand -> function_call .)


state 46

    (63) function_call -> ns_ref . ( )
    (64) function_call -> ns_ref . ( operand_list )
    (82) var_ref -> ns_ref .
    (87) ns_ref -> ns_ref . SEP ID
    (84) class_ref -> ns_ref . SEP CID

    (               shift and go to state 27
    .               reduce using rule 82 (var_ref -> ns_ref .)
    CMP_OP          reduce using rule 82 (var_ref -> ns_ref .)
    IN              reduce using rule 82 (var_ref -> ns_ref .)
    ,               reduce using rule 82 (var_ref -> ns_ref .)
    )               reduce using rule 82 (var_ref -> ns_ref .)
    ]               reduce using rule 82 (var_ref -> ns_ref .)
    AND             reduce using rule 82 (var_ref -> ns_ref .)
    OR              reduce using rule 82 (var_ref -> ns_ref .)
    MLS             reduce using rule 82 (var_ref -> ns_ref .)
    ENTITY          reduce using rule 82 (var_ref -> ns_ref .)
    IMPLEMENT       reduce using rule 82 (var_ref -> ns_ref .)
    IMPLEMENTATION  reduce using rule 82 (var_ref -> ns_ref .)
    TYPEDEF         reduce using rule 82 (var_ref -> ns_ref .)
    INDEX           reduce using rule 82 (var_ref -> ns_ref .)
    CID             reduce using rule 82 (var_ref -> ns_ref .)
    FOR             reduce using rule 82 (var_ref -> ns_ref .)
    ID              reduce using rule 82 (var_ref -> ns_ref .)
    $end            reduce using rule 82 (var_ref -> ns_ref .)
    :               reduce using rule 82 (var_ref -> ns_ref .)
    END             reduce using rule 82 (var_ref -> ns_ref .)
    SEP             shift and go to state 81


state 47

    (69) constant -> mls .

    CMP_OP          reduce using rule 69 (constant -> mls .)
    IN              reduce using rule 69 (constant -> mls .)
    ,               reduce using rule 69 (constant -> mls .)
    )               reduce using rule 69 (constant -> mls .)
    END             reduce using rule 69 (constant -> mls .)
    ID              reduce using rule 69 (constant -> mls .)
    ]               reduce using rule 69 (constant -> mls .)
    MLS             reduce using rule 69 (constant -> mls .)
    ENTITY          reduce using rule 69 (constant -> mls .)
    IMPLEMENT       reduce using rule 69 (constant -> mls .)
    IMPLEMENTATION  reduce using rule 69 (constant -> mls .)
    TYPEDEF         reduce using rule 69 (constant -> mls .)
    INDEX           reduce using rule 69 (constant -> mls .)
    CID             reduce using rule 69 (constant -> mls .)
    FOR             reduce using rule 69 (constant -> mls .)
    $end            reduce using rule 69 (constant -> mls .)
    AND             reduce using rule 69 (constant -> mls .)
    OR              reduce using rule 69 (constant -> mls .)
    :               reduce using rule 69 (constant -> mls .)


state 48

    (73) constant -> FALSE .

    ,               reduce using rule 73 (constant -> FALSE .)
    )               reduce using rule 73 (constant -> FALSE .)
    END             reduce using rule 73 (constant -> FALSE .)
    ID              reduce using rule 73 (constant -> FALSE .)
    ]               reduce using rule 73 (constant -> FALSE .)
    MLS             reduce using rule 73 (constant -> FALSE .)
    ENTITY          reduce using rule 73 (constant -> FALSE .)
    IMPLEMENT       reduce using rule 73 (constant -> FALSE .)
    IMPLEMENTATION  reduce using rule 73 (constant -> FALSE .)
    TYPEDEF         reduce using rule 73 (constant -> FALSE .)
    INDEX           reduce using rule 73 (constant -> FALSE .)
    CID             reduce using rule 73 (constant -> FALSE .)
    FOR             reduce using rule 73 (constant -> FALSE .)
    $end            reduce using rule 73 (constant -> FALSE .)
    AND             reduce using rule 73 (constant -> FALSE .)
    OR              reduce using rule 73 (constant -> FALSE .)
    :               reduce using rule 73 (constant -> FALSE .)


state 49

    (74) constant -> STRING .

    CMP_OP          reduce using rule 74 (constant -> STRING .)
    IN              reduce using rule 74 (constant -> STRING .)
    ,               reduce using rule 74 (constant -> STRING .)
    )               reduce using rule 74 (constant -> STRING .)
    END             reduce using rule 74 (constant -> STRING .)
    ID              reduce using rule 74 (constant -> STRING .)
    ]               reduce using rule 74 (constant -> STRING .)
    MLS             reduce using rule 74 (constant -> STRING .)
    ENTITY          reduce using rule 74 (constant -> STRING .)
    IMPLEMENT       reduce using rule 74 (constant -> STRING .)
    IMPLEMENTATION  reduce using rule 74 (constant -> STRING .)
    TYPEDEF         reduce using rule 74 (constant -> STRING .)
    INDEX           reduce using rule 74 (constant -> STRING .)
    CID             reduce using rule 74 (constant -> STRING .)
    FOR             reduce using rule 74 (constant -> STRING .)
    $end            reduce using rule 74 (constant -> STRING .)
    AND             reduce using rule 74 (constant -> STRING .)
    OR              reduce using rule 74 (constant -> STRING .)
    :               reduce using rule 74 (constant -> STRING .)


state 50

    (67) constant -> INT .

    CMP_OP          reduce using rule 67 (constant -> INT .)
    IN              reduce using rule 67 (constant -> INT .)
    ,               reduce using rule 67 (constant -> INT .)
    )               reduce using rule 67 (constant -> INT .)
    END             reduce using rule 67 (constant -> INT .)
    ID              reduce using rule 67 (constant -> INT .)
    ]               reduce using rule 67 (constant -> INT .)
    MLS             reduce using rule 67 (constant -> INT .)
    ENTITY          reduce using rule 67 (constant -> INT .)
    IMPLEMENT       reduce using rule 67 (constant -> INT .)
    IMPLEMENTATION  reduce using rule 67 (constant -> INT .)
    TYPEDEF         reduce using rule 67 (constant -> INT .)
    INDEX           reduce using rule 67 (constant -> INT .)
    CID             reduce using rule 67 (constant -> INT .)
    FOR             reduce using rule 67 (constant -> INT .)
    $end            reduce using rule 67 (constant -> INT .)
    AND             reduce using rule 67 (constant -> INT .)
    OR              reduce using rule 67 (constant -> INT .)
    :               reduce using rule 67 (constant -> INT .)


state 51

    (59) operand -> var_ref .
    (81) var_ref -> var_ref . . ID

    CMP_OP          reduce using rule 59 (operand -> var_ref .)
    IN              reduce using rule 59 (operand -> var_ref .)
    MLS             reduce using rule 59 (operand -> var_ref .)
    ENTITY          reduce using rule 59 (operand -> var_ref .)
    IMPLEMENT       reduce using rule 59 (operand -> var_ref .)
    IMPLEMENTATION  reduce using rule 59 (operand -> var_ref .)
    TYPEDEF         reduce using rule 59 (operand -> var_ref .)
    INDEX           reduce using rule 59 (operand -> var_ref .)
    CID             reduce using rule 59 (operand -> var_ref .)
    FOR             reduce using rule 59 (operand -> var_ref .)
    ID              reduce using rule 59 (operand -> var_ref .)
    $end            reduce using rule 59 (operand -> var_ref .)
    END             reduce using rule 59 (operand -> var_ref .)
    :               reduce using rule 59 (operand -> var_ref .)
    ,               reduce using rule 59 (operand -> var_ref .)
    )               reduce using rule 59 (operand -> var_ref .)
    ]               reduce using rule 59 (operand -> var_ref .)
    AND             reduce using rule 59 (operand -> var_ref .)
    OR              reduce using rule 59 (operand -> var_ref .)
    .               shift and go to state 41


state 52

    (64) function_call -> ns_ref ( operand_list . )

    )               shift and go to state 82


state 53

    (63) function_call -> ns_ref ( ) .

    AND             reduce using rule 63 (function_call -> ns_ref ( ) .)
    OR              reduce using rule 63 (function_call -> ns_ref ( ) .)
    MLS             reduce using rule 63 (function_call -> ns_ref ( ) .)
    ENTITY          reduce using rule 63 (function_call -> ns_ref ( ) .)
    IMPLEMENT       reduce using rule 63 (function_call -> ns_ref ( ) .)
    IMPLEMENTATION  reduce using rule 63 (function_call -> ns_ref ( ) .)
    TYPEDEF         reduce using rule 63 (function_call -> ns_ref ( ) .)
    INDEX           reduce using rule 63 (function_call -> ns_ref ( ) .)
    CID             reduce using rule 63 (function_call -> ns_ref ( ) .)
    FOR             reduce using rule 63 (function_call -> ns_ref ( ) .)
    ID              reduce using rule 63 (function_call -> ns_ref ( ) .)
    $end            reduce using rule 63 (function_call -> ns_ref ( ) .)
    CMP_OP          reduce using rule 63 (function_call -> ns_ref ( ) .)
    IN              reduce using rule 63 (function_call -> ns_ref ( ) .)
    ,               reduce using rule 63 (function_call -> ns_ref ( ) .)
    ]               reduce using rule 63 (function_call -> ns_ref ( ) .)
    )               reduce using rule 63 (function_call -> ns_ref ( ) .)
    END             reduce using rule 63 (function_call -> ns_ref ( ) .)
    :               reduce using rule 63 (function_call -> ns_ref ( ) .)


state 54

    (61) constructor -> class_ref . ( param_list )
    (62) constructor -> class_ref . ( )
    (66) index_lookup -> class_ref . [ param_list ]

    (               shift and go to state 32
    [               shift and go to state 83


state 55

    (71) constant -> REGEX .

    CMP_OP          reduce using rule 71 (constant -> REGEX .)
    IN              reduce using rule 71 (constant -> REGEX .)
    ,               reduce using rule 71 (constant -> REGEX .)
    )               reduce using rule 71 (constant -> REGEX .)
    END             reduce using rule 71 (constant -> REGEX .)
    ID              reduce using rule 71 (constant -> REGEX .)
    ]               reduce using rule 71 (constant -> REGEX .)
    MLS             reduce using rule 71 (constant -> REGEX .)
    ENTITY          reduce using rule 71 (constant -> REGEX .)
    IMPLEMENT       reduce using rule 71 (constant -> REGEX .)
    IMPLEMENTATION  reduce using rule 71 (constant -> REGEX .)
    TYPEDEF         reduce using rule 71 (constant -> REGEX .)
    INDEX           reduce using rule 71 (constant -> REGEX .)
    CID             reduce using rule 71 (constant -> REGEX .)
    FOR             reduce using rule 71 (constant -> REGEX .)
    $end            reduce using rule 71 (constant -> REGEX .)
    AND             reduce using rule 71 (constant -> REGEX .)
    OR              reduce using rule 71 (constant -> REGEX .)
    :               reduce using rule 71 (constant -> REGEX .)


state 56

    (58) operand -> list_def .

    CMP_OP          reduce using rule 58 (operand -> list_def .)
    IN              reduce using rule 58 (operand -> list_def .)
    MLS             reduce using rule 58 (operand -> list_def .)
    ENTITY          reduce using rule 58 (operand -> list_def .)
    IMPLEMENT       reduce using rule 58 (operand -> list_def .)
    IMPLEMENTATION  reduce using rule 58 (operand -> list_def .)
    TYPEDEF         reduce using rule 58 (operand -> list_def .)
    INDEX           reduce using rule 58 (operand -> list_def .)
    CID             reduce using rule 58 (operand -> list_def .)
    FOR             reduce using rule 58 (operand -> list_def .)
    ID              reduce using rule 58 (operand -> list_def .)
    $end            reduce using rule 58 (operand -> list_def .)
    END             reduce using rule 58 (operand -> list_def .)
    :               reduce using rule 58 (operand -> list_def .)
    ,               reduce using rule 58 (operand -> list_def .)
    )               reduce using rule 58 (operand -> list_def .)
    ]               reduce using rule 58 (operand -> list_def .)
    AND             reduce using rule 58 (operand -> list_def .)
    OR              reduce using rule 58 (operand -> list_def .)


state 57

    (57) operand -> constructor .

    CMP_OP          reduce using rule 57 (operand -> constructor .)
    IN              reduce using rule 57 (operand -> constructor .)
    MLS             reduce using rule 57 (operand -> constructor .)
    ENTITY          reduce using rule 57 (operand -> constructor .)
    IMPLEMENT       reduce using rule 57 (operand -> constructor .)
    IMPLEMENTATION  reduce using rule 57 (operand -> constructor .)
    TYPEDEF         reduce using rule 57 (operand -> constructor .)
    INDEX           reduce using rule 57 (operand -> constructor .)
    CID             reduce using rule 57 (operand -> constructor .)
    FOR             reduce using rule 57 (operand -> constructor .)
    ID              reduce using rule 57 (operand -> constructor .)
    $end            reduce using rule 57 (operand -> constructor .)
    END             reduce using rule 57 (operand -> constructor .)
    :               reduce using rule 57 (operand -> constructor .)
    ,               reduce using rule 57 (operand -> constructor .)
    )               reduce using rule 57 (operand -> constructor .)
    ]               reduce using rule 57 (operand -> constructor .)
    AND             reduce using rule 57 (operand -> constructor .)
    OR              reduce using rule 57 (operand -> constructor .)


state 58

    (60) operand -> index_lookup .

    CMP_OP          reduce using rule 60 (operand -> index_lookup .)
    IN              reduce using rule 60 (operand -> index_lookup .)
    MLS             reduce using rule 60 (operand -> index_lookup .)
    ENTITY          reduce using rule 60 (operand -> index_lookup .)
    IMPLEMENT       reduce using rule 60 (operand -> index_lookup .)
    IMPLEMENTATION  reduce using rule 60 (operand -> index_lookup .)
    TYPEDEF         reduce using rule 60 (operand -> index_lookup .)
    INDEX           reduce using rule 60 (operand -> index_lookup .)
    CID             reduce using rule 60 (operand -> index_lookup .)
    FOR             reduce using rule 60 (operand -> index_lookup .)
    ID              reduce using rule 60 (operand -> index_lookup .)
    $end            reduce using rule 60 (operand -> index_lookup .)
    END             reduce using rule 60 (operand -> index_lookup .)
    :               reduce using rule 60 (operand -> index_lookup .)
    ,               reduce using rule 60 (operand -> index_lookup .)
    )               reduce using rule 60 (operand -> index_lookup .)
    ]               reduce using rule 60 (operand -> index_lookup .)
    AND             reduce using rule 60 (operand -> index_lookup .)
    OR              reduce using rule 60 (operand -> index_lookup .)


state 59

    (77) operand_list -> operand . , operand_list
    (78) operand_list -> operand .

    ,               shift and go to state 84
    ]               reduce using rule 78 (operand_list -> operand .)
    )               reduce using rule 78 (operand_list -> operand .)


state 60

    (55) operand -> constant .

    CMP_OP          reduce using rule 55 (operand -> constant .)
    IN              reduce using rule 55 (operand -> constant .)
    MLS             reduce using rule 55 (operand -> constant .)
    ENTITY          reduce using rule 55 (operand -> constant .)
    IMPLEMENT       reduce using rule 55 (operand -> constant .)
    IMPLEMENTATION  reduce using rule 55 (operand -> constant .)
    TYPEDEF         reduce using rule 55 (operand -> constant .)
    INDEX           reduce using rule 55 (operand -> constant .)
    CID             reduce using rule 55 (operand -> constant .)
    FOR             reduce using rule 55 (operand -> constant .)
    ID              reduce using rule 55 (operand -> constant .)
    $end            reduce using rule 55 (operand -> constant .)
    END             reduce using rule 55 (operand -> constant .)
    :               reduce using rule 55 (operand -> constant .)
    ,               reduce using rule 55 (operand -> constant .)
    )               reduce using rule 55 (operand -> constant .)
    ]               reduce using rule 55 (operand -> constant .)
    AND             reduce using rule 55 (operand -> constant .)
    OR              reduce using rule 55 (operand -> constant .)


state 61

    (65) list_def -> [ . operand_list ]
    (77) operand_list -> . operand , operand_list
    (78) operand_list -> . operand
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    ,               reduce using rule 70 (constant -> .)
    ]               reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    TRUE            shift and go to state 43
    FALSE           shift and go to state 48
    STRING          shift and go to state 49
    [               shift and go to state 61
    MLS             shift and go to state 26
    ID              shift and go to state 15
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    operand_list                   shift and go to state 85
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    mls                            shift and go to state 47
    function_call                  shift and go to state 45
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 59
    constant                       shift and go to state 60

state 62

    (84) class_ref -> ns_ref SEP CID .

    :               reduce using rule 84 (class_ref -> ns_ref SEP CID .)
    (               reduce using rule 84 (class_ref -> ns_ref SEP CID .)
    [               reduce using rule 84 (class_ref -> ns_ref SEP CID .)
    ,               reduce using rule 84 (class_ref -> ns_ref SEP CID .)
    ID              reduce using rule 84 (class_ref -> ns_ref SEP CID .)
    USING           reduce using rule 84 (class_ref -> ns_ref SEP CID .)


state 63

    (87) ns_ref -> ns_ref SEP ID .

    (               reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    SEP             reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    .               reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    CMP_OP          reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    IN              reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    ,               reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    )               reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    ]               reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    =               reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    AND             reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    OR              reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    MLS             reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    ENTITY          reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    IMPLEMENT       reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    IMPLEMENTATION  reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    TYPEDEF         reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    INDEX           reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    CID             reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    FOR             reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    ID              reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    $end            reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    WHEN            reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    END             reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    MATCHING        reduce using rule 87 (ns_ref -> ns_ref SEP ID .)
    :               reduce using rule 87 (ns_ref -> ns_ref SEP ID .)


state 64

    (29) implement_def -> IMPLEMENT class_ref USING . ns_list
    (30) implement_def -> IMPLEMENT class_ref USING . ns_list WHEN condition
    (79) ns_list -> . ns_ref , ns_list
    (80) ns_list -> . ns_ref
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    ID              shift and go to state 15

    ns_ref                         shift and go to state 86
    ns_list                        shift and go to state 87

state 65

    (31) implementation_def -> IMPLEMENTATION ID FOR . class_ref implementation
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    CID             shift and go to state 21
    ID              shift and go to state 15

    class_ref                      shift and go to state 88
    ns_ref                         shift and go to state 29

state 66

    (32) implementation_def -> IMPLEMENTATION ID implementation .

    MLS             reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)
    ENTITY          reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)
    IMPLEMENT       reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)
    IMPLEMENTATION  reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)
    TYPEDEF         reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)
    INDEX           reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)
    CID             reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)
    FOR             reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)
    ID              reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)
    $end            reduce using rule 32 (implementation_def -> IMPLEMENTATION ID implementation .)


state 67

    (33) implementation -> : . mls stmt_list END
    (34) implementation -> : . stmt_list END
    (35) implementation -> : . END
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (15) stmt_list -> . statement stmt_list
    (16) stmt_list -> . statement
    (11) statement -> . assign
    (12) statement -> . constructor
    (13) statement -> . function_call
    (14) statement -> . for
    (17) assign -> . var_ref = operand
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (18) for -> . FOR ID IN operand implementation
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    END             shift and go to state 89
    MLS             shift and go to state 26
    FOR             shift and go to state 14
    CID             shift and go to state 21
    ID              shift and go to state 15

    var_ref                        shift and go to state 22
    mls                            shift and go to state 92
    statement                      shift and go to state 93
    class_ref                      shift and go to state 94
    function_call                  shift and go to state 1
    ns_ref                         shift and go to state 90
    constructor                    shift and go to state 11
    for                            shift and go to state 3
    stmt_list                      shift and go to state 91
    assign                         shift and go to state 25

state 68

    (61) constructor -> class_ref ( param_list . )

    )               shift and go to state 95


state 69

    (62) constructor -> class_ref ( ) .

    ,               reduce using rule 62 (constructor -> class_ref ( ) .)
    )               reduce using rule 62 (constructor -> class_ref ( ) .)
    MLS             reduce using rule 62 (constructor -> class_ref ( ) .)
    ENTITY          reduce using rule 62 (constructor -> class_ref ( ) .)
    IMPLEMENT       reduce using rule 62 (constructor -> class_ref ( ) .)
    IMPLEMENTATION  reduce using rule 62 (constructor -> class_ref ( ) .)
    TYPEDEF         reduce using rule 62 (constructor -> class_ref ( ) .)
    INDEX           reduce using rule 62 (constructor -> class_ref ( ) .)
    CID             reduce using rule 62 (constructor -> class_ref ( ) .)
    FOR             reduce using rule 62 (constructor -> class_ref ( ) .)
    ID              reduce using rule 62 (constructor -> class_ref ( ) .)
    $end            reduce using rule 62 (constructor -> class_ref ( ) .)
    :               reduce using rule 62 (constructor -> class_ref ( ) .)
    END             reduce using rule 62 (constructor -> class_ref ( ) .)
    CMP_OP          reduce using rule 62 (constructor -> class_ref ( ) .)
    IN              reduce using rule 62 (constructor -> class_ref ( ) .)
    ]               reduce using rule 62 (constructor -> class_ref ( ) .)
    AND             reduce using rule 62 (constructor -> class_ref ( ) .)
    OR              reduce using rule 62 (constructor -> class_ref ( ) .)


state 70

    (75) param_list -> ID . = operand , param_list
    (76) param_list -> ID . = operand

    =               shift and go to state 96


state 71

    (36) relation -> class_ref ID multi . REL multi class_ref ID

    REL             shift and go to state 97


state 72

    (37) multi -> [ . INT ]
    (38) multi -> [ . INT : ]
    (39) multi -> [ . INT : INT ]
    (40) multi -> [ . : INT ]

    INT             shift and go to state 98
    :               shift and go to state 99


state 73

    (44) index -> INDEX class_ref ( . id_list )
    (89) id_list -> . ID , id_list
    (90) id_list -> . ID

    ID              shift and go to state 101

    id_list                        shift and go to state 100

state 74

    (18) for -> FOR ID IN . operand implementation
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    :               reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    TRUE            shift and go to state 43
    FALSE           shift and go to state 48
    STRING          shift and go to state 49
    [               shift and go to state 61
    MLS             shift and go to state 26
    ID              shift and go to state 15
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    mls                            shift and go to state 47
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    function_call                  shift and go to state 45
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 102
    constant                       shift and go to state 60

state 75

    (43) typedef -> TYPEDEF CID AS . constructor
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    CID             shift and go to state 21
    ID              shift and go to state 15

    constructor                    shift and go to state 103
    class_ref                      shift and go to state 94
    ns_ref                         shift and go to state 29

state 76

    (41) typedef -> TYPEDEF ID AS . ns_ref MATCHING REGEX
    (42) typedef -> TYPEDEF ID AS . ns_ref MATCHING condition
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    ID              shift and go to state 15

    ns_ref                         shift and go to state 104

state 77

    (19) entity_def -> ENTITY CID : . entity_body_outer
    (21) entity_body_outer -> . mls entity_body END
    (22) entity_body_outer -> . entity_body END
    (23) entity_body_outer -> . END
    (24) entity_body_outer -> . mls END
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (25) entity_body -> . entity_body attr
    (26) entity_body -> . attr
    (27) attr -> . ns_ref ID
    (28) attr -> . ns_ref ID = constant
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    END             shift and go to state 110
    MLS             shift and go to state 26
    ID              shift and go to state 15

    entity_body_outer              shift and go to state 105
    entity_body                    shift and go to state 109
    attr                           shift and go to state 106
    mls                            shift and go to state 107
    ns_ref                         shift and go to state 108

state 78

    (20) entity_def -> ENTITY CID EXTENDS . class_ref_list : entity_body_outer
    (85) class_ref_list -> . class_ref , class_ref_list
    (86) class_ref_list -> . class_ref
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    CID             shift and go to state 21
    ID              shift and go to state 15

    class_ref_list                 shift and go to state 111
    class_ref                      shift and go to state 112
    ns_ref                         shift and go to state 29

state 79

    (17) assign -> var_ref = operand .

    FOR             reduce using rule 17 (assign -> var_ref = operand .)
    CID             reduce using rule 17 (assign -> var_ref = operand .)
    ID              reduce using rule 17 (assign -> var_ref = operand .)
    END             reduce using rule 17 (assign -> var_ref = operand .)
    MLS             reduce using rule 17 (assign -> var_ref = operand .)
    ENTITY          reduce using rule 17 (assign -> var_ref = operand .)
    IMPLEMENT       reduce using rule 17 (assign -> var_ref = operand .)
    IMPLEMENTATION  reduce using rule 17 (assign -> var_ref = operand .)
    TYPEDEF         reduce using rule 17 (assign -> var_ref = operand .)
    INDEX           reduce using rule 17 (assign -> var_ref = operand .)
    $end            reduce using rule 17 (assign -> var_ref = operand .)


state 80

    (81) var_ref -> var_ref . ID .

    .               reduce using rule 81 (var_ref -> var_ref . ID .)
    CMP_OP          reduce using rule 81 (var_ref -> var_ref . ID .)
    IN              reduce using rule 81 (var_ref -> var_ref . ID .)
    ,               reduce using rule 81 (var_ref -> var_ref . ID .)
    )               reduce using rule 81 (var_ref -> var_ref . ID .)
    ]               reduce using rule 81 (var_ref -> var_ref . ID .)
    AND             reduce using rule 81 (var_ref -> var_ref . ID .)
    OR              reduce using rule 81 (var_ref -> var_ref . ID .)
    MLS             reduce using rule 81 (var_ref -> var_ref . ID .)
    ENTITY          reduce using rule 81 (var_ref -> var_ref . ID .)
    IMPLEMENT       reduce using rule 81 (var_ref -> var_ref . ID .)
    IMPLEMENTATION  reduce using rule 81 (var_ref -> var_ref . ID .)
    TYPEDEF         reduce using rule 81 (var_ref -> var_ref . ID .)
    INDEX           reduce using rule 81 (var_ref -> var_ref . ID .)
    CID             reduce using rule 81 (var_ref -> var_ref . ID .)
    FOR             reduce using rule 81 (var_ref -> var_ref . ID .)
    ID              reduce using rule 81 (var_ref -> var_ref . ID .)
    $end            reduce using rule 81 (var_ref -> var_ref . ID .)
    =               reduce using rule 81 (var_ref -> var_ref . ID .)
    :               reduce using rule 81 (var_ref -> var_ref . ID .)
    END             reduce using rule 81 (var_ref -> var_ref . ID .)


state 81

    (87) ns_ref -> ns_ref SEP . ID
    (84) class_ref -> ns_ref SEP . CID

    ID              shift and go to state 63
    CID             shift and go to state 62


state 82

    (64) function_call -> ns_ref ( operand_list ) .

    AND             reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    OR              reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    MLS             reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    ENTITY          reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    IMPLEMENT       reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    IMPLEMENTATION  reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    TYPEDEF         reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    INDEX           reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    CID             reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    FOR             reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    ID              reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    $end            reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    CMP_OP          reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    IN              reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    ,               reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    ]               reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    )               reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    END             reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)
    :               reduce using rule 64 (function_call -> ns_ref ( operand_list ) .)


state 83

    (66) index_lookup -> class_ref [ . param_list ]
    (75) param_list -> . ID = operand , param_list
    (76) param_list -> . ID = operand

    ID              shift and go to state 70

    param_list                     shift and go to state 113

state 84

    (77) operand_list -> operand , . operand_list
    (77) operand_list -> . operand , operand_list
    (78) operand_list -> . operand
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    ,               reduce using rule 70 (constant -> .)
    )               reduce using rule 70 (constant -> .)
    ]               reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    TRUE            shift and go to state 43
    FALSE           shift and go to state 48
    STRING          shift and go to state 49
    [               shift and go to state 61
    MLS             shift and go to state 26
    ID              shift and go to state 15
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    operand_list                   shift and go to state 114
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    mls                            shift and go to state 47
    function_call                  shift and go to state 45
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 59
    constant                       shift and go to state 60

state 85

    (65) list_def -> [ operand_list . ]

    ]               shift and go to state 115


state 86

    (79) ns_list -> ns_ref . , ns_list
    (80) ns_list -> ns_ref .
    (87) ns_ref -> ns_ref . SEP ID

    ,               shift and go to state 116
    WHEN            reduce using rule 80 (ns_list -> ns_ref .)
    MLS             reduce using rule 80 (ns_list -> ns_ref .)
    ENTITY          reduce using rule 80 (ns_list -> ns_ref .)
    IMPLEMENT       reduce using rule 80 (ns_list -> ns_ref .)
    IMPLEMENTATION  reduce using rule 80 (ns_list -> ns_ref .)
    TYPEDEF         reduce using rule 80 (ns_list -> ns_ref .)
    INDEX           reduce using rule 80 (ns_list -> ns_ref .)
    CID             reduce using rule 80 (ns_list -> ns_ref .)
    FOR             reduce using rule 80 (ns_list -> ns_ref .)
    ID              reduce using rule 80 (ns_list -> ns_ref .)
    $end            reduce using rule 80 (ns_list -> ns_ref .)
    SEP             shift and go to state 117


state 87

    (29) implement_def -> IMPLEMENT class_ref USING ns_list .
    (30) implement_def -> IMPLEMENT class_ref USING ns_list . WHEN condition

    MLS             reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    ENTITY          reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    IMPLEMENT       reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    IMPLEMENTATION  reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    TYPEDEF         reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    INDEX           reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    CID             reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    FOR             reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    ID              reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    $end            reduce using rule 29 (implement_def -> IMPLEMENT class_ref USING ns_list .)
    WHEN            shift and go to state 118


state 88

    (31) implementation_def -> IMPLEMENTATION ID FOR class_ref . implementation
    (33) implementation -> . : mls stmt_list END
    (34) implementation -> . : stmt_list END
    (35) implementation -> . : END

    :               shift and go to state 67

    implementation                 shift and go to state 119

state 89

    (35) implementation -> : END .

    MLS             reduce using rule 35 (implementation -> : END .)
    ENTITY          reduce using rule 35 (implementation -> : END .)
    IMPLEMENT       reduce using rule 35 (implementation -> : END .)
    IMPLEMENTATION  reduce using rule 35 (implementation -> : END .)
    TYPEDEF         reduce using rule 35 (implementation -> : END .)
    INDEX           reduce using rule 35 (implementation -> : END .)
    CID             reduce using rule 35 (implementation -> : END .)
    FOR             reduce using rule 35 (implementation -> : END .)
    ID              reduce using rule 35 (implementation -> : END .)
    $end            reduce using rule 35 (implementation -> : END .)
    END             reduce using rule 35 (implementation -> : END .)


state 90

    (63) function_call -> ns_ref . ( )
    (64) function_call -> ns_ref . ( operand_list )
    (82) var_ref -> ns_ref .
    (84) class_ref -> ns_ref . SEP CID
    (87) ns_ref -> ns_ref . SEP ID

    (               shift and go to state 27
    =               reduce using rule 82 (var_ref -> ns_ref .)
    .               reduce using rule 82 (var_ref -> ns_ref .)
    SEP             shift and go to state 28


state 91

    (34) implementation -> : stmt_list . END

    END             shift and go to state 120


state 92

    (33) implementation -> : mls . stmt_list END
    (15) stmt_list -> . statement stmt_list
    (16) stmt_list -> . statement
    (11) statement -> . assign
    (12) statement -> . constructor
    (13) statement -> . function_call
    (14) statement -> . for
    (17) assign -> . var_ref = operand
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (18) for -> . FOR ID IN operand implementation
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    FOR             shift and go to state 14
    CID             shift and go to state 21
    ID              shift and go to state 15

    var_ref                        shift and go to state 22
    statement                      shift and go to state 93
    class_ref                      shift and go to state 94
    function_call                  shift and go to state 1
    ns_ref                         shift and go to state 90
    constructor                    shift and go to state 11
    for                            shift and go to state 3
    stmt_list                      shift and go to state 121
    assign                         shift and go to state 25

state 93

    (15) stmt_list -> statement . stmt_list
    (16) stmt_list -> statement .
    (15) stmt_list -> . statement stmt_list
    (16) stmt_list -> . statement
    (11) statement -> . assign
    (12) statement -> . constructor
    (13) statement -> . function_call
    (14) statement -> . for
    (17) assign -> . var_ref = operand
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (18) for -> . FOR ID IN operand implementation
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    END             reduce using rule 16 (stmt_list -> statement .)
    FOR             shift and go to state 14
    CID             shift and go to state 21
    ID              shift and go to state 15

    var_ref                        shift and go to state 22
    statement                      shift and go to state 93
    class_ref                      shift and go to state 94
    function_call                  shift and go to state 1
    ns_ref                         shift and go to state 90
    constructor                    shift and go to state 11
    for                            shift and go to state 3
    stmt_list                      shift and go to state 122
    assign                         shift and go to state 25

state 94

    (61) constructor -> class_ref . ( param_list )
    (62) constructor -> class_ref . ( )

    (               shift and go to state 32


state 95

    (61) constructor -> class_ref ( param_list ) .

    ,               reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    )               reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    MLS             reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    ENTITY          reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    IMPLEMENT       reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    IMPLEMENTATION  reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    TYPEDEF         reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    INDEX           reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    CID             reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    FOR             reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    ID              reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    $end            reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    :               reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    END             reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    CMP_OP          reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    IN              reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    ]               reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    AND             reduce using rule 61 (constructor -> class_ref ( param_list ) .)
    OR              reduce using rule 61 (constructor -> class_ref ( param_list ) .)


state 96

    (75) param_list -> ID = . operand , param_list
    (76) param_list -> ID = . operand
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    ,               reduce using rule 70 (constant -> .)
    )               reduce using rule 70 (constant -> .)
    ]               reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    TRUE            shift and go to state 43
    FALSE           shift and go to state 48
    STRING          shift and go to state 49
    [               shift and go to state 61
    MLS             shift and go to state 26
    ID              shift and go to state 15
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    mls                            shift and go to state 47
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    function_call                  shift and go to state 45
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 123
    constant                       shift and go to state 60

state 97

    (36) relation -> class_ref ID multi REL . multi class_ref ID
    (37) multi -> . [ INT ]
    (38) multi -> . [ INT : ]
    (39) multi -> . [ INT : INT ]
    (40) multi -> . [ : INT ]

    [               shift and go to state 72

    multi                          shift and go to state 124

state 98

    (37) multi -> [ INT . ]
    (38) multi -> [ INT . : ]
    (39) multi -> [ INT . : INT ]

    ]               shift and go to state 126
    :               shift and go to state 125


state 99

    (40) multi -> [ : . INT ]

    INT             shift and go to state 127


state 100

    (44) index -> INDEX class_ref ( id_list . )

    )               shift and go to state 128


state 101

    (89) id_list -> ID . , id_list
    (90) id_list -> ID .

    ,               shift and go to state 129
    )               reduce using rule 90 (id_list -> ID .)


state 102

    (18) for -> FOR ID IN operand . implementation
    (33) implementation -> . : mls stmt_list END
    (34) implementation -> . : stmt_list END
    (35) implementation -> . : END

    :               shift and go to state 67

    implementation                 shift and go to state 130

state 103

    (43) typedef -> TYPEDEF CID AS constructor .

    MLS             reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)
    ENTITY          reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)
    IMPLEMENT       reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)
    IMPLEMENTATION  reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)
    TYPEDEF         reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)
    INDEX           reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)
    CID             reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)
    FOR             reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)
    ID              reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)
    $end            reduce using rule 43 (typedef -> TYPEDEF CID AS constructor .)


state 104

    (41) typedef -> TYPEDEF ID AS ns_ref . MATCHING REGEX
    (42) typedef -> TYPEDEF ID AS ns_ref . MATCHING condition
    (87) ns_ref -> ns_ref . SEP ID

    MATCHING        shift and go to state 131
    SEP             shift and go to state 117


state 105

    (19) entity_def -> ENTITY CID : entity_body_outer .

    MLS             reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)
    ENTITY          reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)
    IMPLEMENT       reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)
    IMPLEMENTATION  reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)
    TYPEDEF         reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)
    INDEX           reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)
    CID             reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)
    FOR             reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)
    ID              reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)
    $end            reduce using rule 19 (entity_def -> ENTITY CID : entity_body_outer .)


state 106

    (26) entity_body -> attr .

    END             reduce using rule 26 (entity_body -> attr .)
    ID              reduce using rule 26 (entity_body -> attr .)


state 107

    (21) entity_body_outer -> mls . entity_body END
    (24) entity_body_outer -> mls . END
    (25) entity_body -> . entity_body attr
    (26) entity_body -> . attr
    (27) attr -> . ns_ref ID
    (28) attr -> . ns_ref ID = constant
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    END             shift and go to state 133
    ID              shift and go to state 15

    attr                           shift and go to state 106
    ns_ref                         shift and go to state 108
    entity_body                    shift and go to state 132

state 108

    (27) attr -> ns_ref . ID
    (28) attr -> ns_ref . ID = constant
    (87) ns_ref -> ns_ref . SEP ID

    ID              shift and go to state 134
    SEP             shift and go to state 117


state 109

    (22) entity_body_outer -> entity_body . END
    (25) entity_body -> entity_body . attr
    (27) attr -> . ns_ref ID
    (28) attr -> . ns_ref ID = constant
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    END             shift and go to state 136
    ID              shift and go to state 15

    attr                           shift and go to state 135
    ns_ref                         shift and go to state 108

state 110

    (23) entity_body_outer -> END .

    MLS             reduce using rule 23 (entity_body_outer -> END .)
    ENTITY          reduce using rule 23 (entity_body_outer -> END .)
    IMPLEMENT       reduce using rule 23 (entity_body_outer -> END .)
    IMPLEMENTATION  reduce using rule 23 (entity_body_outer -> END .)
    TYPEDEF         reduce using rule 23 (entity_body_outer -> END .)
    INDEX           reduce using rule 23 (entity_body_outer -> END .)
    CID             reduce using rule 23 (entity_body_outer -> END .)
    FOR             reduce using rule 23 (entity_body_outer -> END .)
    ID              reduce using rule 23 (entity_body_outer -> END .)
    $end            reduce using rule 23 (entity_body_outer -> END .)


state 111

    (20) entity_def -> ENTITY CID EXTENDS class_ref_list . : entity_body_outer

    :               shift and go to state 137


state 112

    (85) class_ref_list -> class_ref . , class_ref_list
    (86) class_ref_list -> class_ref .

    ,               shift and go to state 138
    :               reduce using rule 86 (class_ref_list -> class_ref .)


state 113

    (66) index_lookup -> class_ref [ param_list . ]

    ]               shift and go to state 139


state 114

    (77) operand_list -> operand , operand_list .

    ]               reduce using rule 77 (operand_list -> operand , operand_list .)
    )               reduce using rule 77 (operand_list -> operand , operand_list .)


state 115

    (65) list_def -> [ operand_list ] .

    MLS             reduce using rule 65 (list_def -> [ operand_list ] .)
    ENTITY          reduce using rule 65 (list_def -> [ operand_list ] .)
    IMPLEMENT       reduce using rule 65 (list_def -> [ operand_list ] .)
    IMPLEMENTATION  reduce using rule 65 (list_def -> [ operand_list ] .)
    TYPEDEF         reduce using rule 65 (list_def -> [ operand_list ] .)
    INDEX           reduce using rule 65 (list_def -> [ operand_list ] .)
    CID             reduce using rule 65 (list_def -> [ operand_list ] .)
    FOR             reduce using rule 65 (list_def -> [ operand_list ] .)
    ID              reduce using rule 65 (list_def -> [ operand_list ] .)
    $end            reduce using rule 65 (list_def -> [ operand_list ] .)
    END             reduce using rule 65 (list_def -> [ operand_list ] .)
    ,               reduce using rule 65 (list_def -> [ operand_list ] .)
    ]               reduce using rule 65 (list_def -> [ operand_list ] .)
    AND             reduce using rule 65 (list_def -> [ operand_list ] .)
    OR              reduce using rule 65 (list_def -> [ operand_list ] .)
    )               reduce using rule 65 (list_def -> [ operand_list ] .)
    CMP_OP          reduce using rule 65 (list_def -> [ operand_list ] .)
    IN              reduce using rule 65 (list_def -> [ operand_list ] .)
    :               reduce using rule 65 (list_def -> [ operand_list ] .)


state 116

    (79) ns_list -> ns_ref , . ns_list
    (79) ns_list -> . ns_ref , ns_list
    (80) ns_list -> . ns_ref
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    ID              shift and go to state 15

    ns_list                        shift and go to state 140
    ns_ref                         shift and go to state 86

state 117

    (87) ns_ref -> ns_ref SEP . ID

    ID              shift and go to state 63


state 118

    (30) implement_def -> IMPLEMENT class_ref USING ns_list WHEN . condition
    (45) condition -> . ( condition )
    (46) condition -> . operand CMP_OP operand
    (47) condition -> . operand IN list_def
    (48) condition -> . operand IN var_ref
    (49) condition -> . condition AND condition
    (50) condition -> . condition OR condition
    (51) condition -> . function_call
    (52) condition -> . NOT condition
    (53) condition -> . TRUE
    (54) condition -> . FALSE
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    (               shift and go to state 145
    NOT             shift and go to state 146
    TRUE            shift and go to state 141
    FALSE           shift and go to state 147
    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    CMP_OP          reduce using rule 70 (constant -> .)
    IN              reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    STRING          shift and go to state 49
    [               shift and go to state 61
    ID              shift and go to state 15
    MLS             shift and go to state 26
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    class_ref                      shift and go to state 54
    function_call                  shift and go to state 143
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    mls                            shift and go to state 47
    list_def                       shift and go to state 56
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 144
    constant                       shift and go to state 60
    condition                      shift and go to state 142

state 119

    (31) implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .

    MLS             reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    ENTITY          reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    IMPLEMENT       reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    IMPLEMENTATION  reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    TYPEDEF         reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    INDEX           reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    CID             reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    FOR             reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    ID              reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    $end            reduce using rule 31 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)


state 120

    (34) implementation -> : stmt_list END .

    MLS             reduce using rule 34 (implementation -> : stmt_list END .)
    ENTITY          reduce using rule 34 (implementation -> : stmt_list END .)
    IMPLEMENT       reduce using rule 34 (implementation -> : stmt_list END .)
    IMPLEMENTATION  reduce using rule 34 (implementation -> : stmt_list END .)
    TYPEDEF         reduce using rule 34 (implementation -> : stmt_list END .)
    INDEX           reduce using rule 34 (implementation -> : stmt_list END .)
    CID             reduce using rule 34 (implementation -> : stmt_list END .)
    FOR             reduce using rule 34 (implementation -> : stmt_list END .)
    ID              reduce using rule 34 (implementation -> : stmt_list END .)
    $end            reduce using rule 34 (implementation -> : stmt_list END .)
    END             reduce using rule 34 (implementation -> : stmt_list END .)


state 121

    (33) implementation -> : mls stmt_list . END

    END             shift and go to state 148


state 122

    (15) stmt_list -> statement stmt_list .

    END             reduce using rule 15 (stmt_list -> statement stmt_list .)


state 123

    (75) param_list -> ID = operand . , param_list
    (76) param_list -> ID = operand .

    ,               shift and go to state 149
    )               reduce using rule 76 (param_list -> ID = operand .)
    ]               reduce using rule 76 (param_list -> ID = operand .)


state 124

    (36) relation -> class_ref ID multi REL multi . class_ref ID
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    CID             shift and go to state 21
    ID              shift and go to state 15

    class_ref                      shift and go to state 150
    ns_ref                         shift and go to state 29

state 125

    (38) multi -> [ INT : . ]
    (39) multi -> [ INT : . INT ]

    ]               shift and go to state 152
    INT             shift and go to state 151


state 126

    (37) multi -> [ INT ] .

    REL             reduce using rule 37 (multi -> [ INT ] .)
    CID             reduce using rule 37 (multi -> [ INT ] .)
    ID              reduce using rule 37 (multi -> [ INT ] .)


state 127

    (40) multi -> [ : INT . ]

    ]               shift and go to state 153


state 128

    (44) index -> INDEX class_ref ( id_list ) .

    MLS             reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)
    ENTITY          reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)
    IMPLEMENT       reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)
    IMPLEMENTATION  reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)
    TYPEDEF         reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)
    INDEX           reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)
    CID             reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)
    FOR             reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)
    ID              reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)
    $end            reduce using rule 44 (index -> INDEX class_ref ( id_list ) .)


state 129

    (89) id_list -> ID , . id_list
    (89) id_list -> . ID , id_list
    (90) id_list -> . ID

    ID              shift and go to state 101

    id_list                        shift and go to state 154

state 130

    (18) for -> FOR ID IN operand implementation .

    FOR             reduce using rule 18 (for -> FOR ID IN operand implementation .)
    CID             reduce using rule 18 (for -> FOR ID IN operand implementation .)
    ID              reduce using rule 18 (for -> FOR ID IN operand implementation .)
    END             reduce using rule 18 (for -> FOR ID IN operand implementation .)
    MLS             reduce using rule 18 (for -> FOR ID IN operand implementation .)
    ENTITY          reduce using rule 18 (for -> FOR ID IN operand implementation .)
    IMPLEMENT       reduce using rule 18 (for -> FOR ID IN operand implementation .)
    IMPLEMENTATION  reduce using rule 18 (for -> FOR ID IN operand implementation .)
    TYPEDEF         reduce using rule 18 (for -> FOR ID IN operand implementation .)
    INDEX           reduce using rule 18 (for -> FOR ID IN operand implementation .)
    $end            reduce using rule 18 (for -> FOR ID IN operand implementation .)


state 131

    (41) typedef -> TYPEDEF ID AS ns_ref MATCHING . REGEX
    (42) typedef -> TYPEDEF ID AS ns_ref MATCHING . condition
    (45) condition -> . ( condition )
    (46) condition -> . operand CMP_OP operand
    (47) condition -> . operand IN list_def
    (48) condition -> . operand IN var_ref
    (49) condition -> . condition AND condition
    (50) condition -> . condition OR condition
    (51) condition -> . function_call
    (52) condition -> . NOT condition
    (53) condition -> . TRUE
    (54) condition -> . FALSE
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    REGEX           shift and go to state 155
    (               shift and go to state 145
    NOT             shift and go to state 146
    TRUE            shift and go to state 141
    FALSE           shift and go to state 147
    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    CMP_OP          reduce using rule 70 (constant -> .)
    IN              reduce using rule 70 (constant -> .)
    STRING          shift and go to state 49
    [               shift and go to state 61
    ID              shift and go to state 15
    MLS             shift and go to state 26
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    mls                            shift and go to state 47
    class_ref                      shift and go to state 54
    function_call                  shift and go to state 143
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    list_def                       shift and go to state 56
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 144
    constant                       shift and go to state 60
    condition                      shift and go to state 156

state 132

    (21) entity_body_outer -> mls entity_body . END
    (25) entity_body -> entity_body . attr
    (27) attr -> . ns_ref ID
    (28) attr -> . ns_ref ID = constant
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    END             shift and go to state 157
    ID              shift and go to state 15

    attr                           shift and go to state 135
    ns_ref                         shift and go to state 108

state 133

    (24) entity_body_outer -> mls END .

    MLS             reduce using rule 24 (entity_body_outer -> mls END .)
    ENTITY          reduce using rule 24 (entity_body_outer -> mls END .)
    IMPLEMENT       reduce using rule 24 (entity_body_outer -> mls END .)
    IMPLEMENTATION  reduce using rule 24 (entity_body_outer -> mls END .)
    TYPEDEF         reduce using rule 24 (entity_body_outer -> mls END .)
    INDEX           reduce using rule 24 (entity_body_outer -> mls END .)
    CID             reduce using rule 24 (entity_body_outer -> mls END .)
    FOR             reduce using rule 24 (entity_body_outer -> mls END .)
    ID              reduce using rule 24 (entity_body_outer -> mls END .)
    $end            reduce using rule 24 (entity_body_outer -> mls END .)


state 134

    (27) attr -> ns_ref ID .
    (28) attr -> ns_ref ID . = constant

    END             reduce using rule 27 (attr -> ns_ref ID .)
    ID              reduce using rule 27 (attr -> ns_ref ID .)
    =               shift and go to state 158


state 135

    (25) entity_body -> entity_body attr .

    END             reduce using rule 25 (entity_body -> entity_body attr .)
    ID              reduce using rule 25 (entity_body -> entity_body attr .)


state 136

    (22) entity_body_outer -> entity_body END .

    MLS             reduce using rule 22 (entity_body_outer -> entity_body END .)
    ENTITY          reduce using rule 22 (entity_body_outer -> entity_body END .)
    IMPLEMENT       reduce using rule 22 (entity_body_outer -> entity_body END .)
    IMPLEMENTATION  reduce using rule 22 (entity_body_outer -> entity_body END .)
    TYPEDEF         reduce using rule 22 (entity_body_outer -> entity_body END .)
    INDEX           reduce using rule 22 (entity_body_outer -> entity_body END .)
    CID             reduce using rule 22 (entity_body_outer -> entity_body END .)
    FOR             reduce using rule 22 (entity_body_outer -> entity_body END .)
    ID              reduce using rule 22 (entity_body_outer -> entity_body END .)
    $end            reduce using rule 22 (entity_body_outer -> entity_body END .)


state 137

    (20) entity_def -> ENTITY CID EXTENDS class_ref_list : . entity_body_outer
    (21) entity_body_outer -> . mls entity_body END
    (22) entity_body_outer -> . entity_body END
    (23) entity_body_outer -> . END
    (24) entity_body_outer -> . mls END
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (25) entity_body -> . entity_body attr
    (26) entity_body -> . attr
    (27) attr -> . ns_ref ID
    (28) attr -> . ns_ref ID = constant
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    END             shift and go to state 110
    MLS             shift and go to state 26
    ID              shift and go to state 15

    entity_body_outer              shift and go to state 159
    entity_body                    shift and go to state 109
    attr                           shift and go to state 106
    mls                            shift and go to state 107
    ns_ref                         shift and go to state 108

state 138

    (85) class_ref_list -> class_ref , . class_ref_list
    (85) class_ref_list -> . class_ref , class_ref_list
    (86) class_ref_list -> . class_ref
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    CID             shift and go to state 21
    ID              shift and go to state 15

    class_ref                      shift and go to state 112
    class_ref_list                 shift and go to state 160
    ns_ref                         shift and go to state 29

state 139

    (66) index_lookup -> class_ref [ param_list ] .

    CMP_OP          reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    IN              reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    ,               reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    )               reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    ]               reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    AND             reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    OR              reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    MLS             reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    ENTITY          reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    IMPLEMENT       reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    IMPLEMENTATION  reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    TYPEDEF         reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    INDEX           reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    CID             reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    FOR             reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    ID              reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    $end            reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    END             reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)
    :               reduce using rule 66 (index_lookup -> class_ref [ param_list ] .)


state 140

    (79) ns_list -> ns_ref , ns_list .

    WHEN            reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    MLS             reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    ENTITY          reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    IMPLEMENT       reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    IMPLEMENTATION  reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    TYPEDEF         reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    INDEX           reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    CID             reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    FOR             reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    ID              reduce using rule 79 (ns_list -> ns_ref , ns_list .)
    $end            reduce using rule 79 (ns_list -> ns_ref , ns_list .)


state 141

    (53) condition -> TRUE .
    (72) constant -> TRUE .

    AND             reduce using rule 53 (condition -> TRUE .)
    OR              reduce using rule 53 (condition -> TRUE .)
    MLS             reduce using rule 53 (condition -> TRUE .)
    ENTITY          reduce using rule 53 (condition -> TRUE .)
    IMPLEMENT       reduce using rule 53 (condition -> TRUE .)
    IMPLEMENTATION  reduce using rule 53 (condition -> TRUE .)
    TYPEDEF         reduce using rule 53 (condition -> TRUE .)
    INDEX           reduce using rule 53 (condition -> TRUE .)
    CID             reduce using rule 53 (condition -> TRUE .)
    FOR             reduce using rule 53 (condition -> TRUE .)
    ID              reduce using rule 53 (condition -> TRUE .)
    $end            reduce using rule 53 (condition -> TRUE .)
    )               reduce using rule 53 (condition -> TRUE .)
    CMP_OP          reduce using rule 72 (constant -> TRUE .)
    IN              reduce using rule 72 (constant -> TRUE .)


state 142

    (30) implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .
    (49) condition -> condition . AND condition
    (50) condition -> condition . OR condition

    MLS             reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    ENTITY          reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    IMPLEMENT       reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    IMPLEMENTATION  reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    TYPEDEF         reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    INDEX           reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    CID             reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    FOR             reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    ID              reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    $end            reduce using rule 30 (implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition .)
    AND             shift and go to state 161
    OR              shift and go to state 162


state 143

    (51) condition -> function_call .
    (56) operand -> function_call .

    AND             reduce using rule 51 (condition -> function_call .)
    OR              reduce using rule 51 (condition -> function_call .)
    MLS             reduce using rule 51 (condition -> function_call .)
    ENTITY          reduce using rule 51 (condition -> function_call .)
    IMPLEMENT       reduce using rule 51 (condition -> function_call .)
    IMPLEMENTATION  reduce using rule 51 (condition -> function_call .)
    TYPEDEF         reduce using rule 51 (condition -> function_call .)
    INDEX           reduce using rule 51 (condition -> function_call .)
    CID             reduce using rule 51 (condition -> function_call .)
    FOR             reduce using rule 51 (condition -> function_call .)
    ID              reduce using rule 51 (condition -> function_call .)
    $end            reduce using rule 51 (condition -> function_call .)
    )               reduce using rule 51 (condition -> function_call .)
    CMP_OP          reduce using rule 56 (operand -> function_call .)
    IN              reduce using rule 56 (operand -> function_call .)


state 144

    (46) condition -> operand . CMP_OP operand
    (47) condition -> operand . IN list_def
    (48) condition -> operand . IN var_ref

    CMP_OP          shift and go to state 164
    IN              shift and go to state 163


state 145

    (45) condition -> ( . condition )
    (45) condition -> . ( condition )
    (46) condition -> . operand CMP_OP operand
    (47) condition -> . operand IN list_def
    (48) condition -> . operand IN var_ref
    (49) condition -> . condition AND condition
    (50) condition -> . condition OR condition
    (51) condition -> . function_call
    (52) condition -> . NOT condition
    (53) condition -> . TRUE
    (54) condition -> . FALSE
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    (               shift and go to state 145
    NOT             shift and go to state 146
    TRUE            shift and go to state 141
    FALSE           shift and go to state 147
    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    CMP_OP          reduce using rule 70 (constant -> .)
    IN              reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    STRING          shift and go to state 49
    [               shift and go to state 61
    ID              shift and go to state 15
    MLS             shift and go to state 26
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    mls                            shift and go to state 47
    function_call                  shift and go to state 143
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 144
    constant                       shift and go to state 60
    condition                      shift and go to state 165

state 146

    (52) condition -> NOT . condition
    (45) condition -> . ( condition )
    (46) condition -> . operand CMP_OP operand
    (47) condition -> . operand IN list_def
    (48) condition -> . operand IN var_ref
    (49) condition -> . condition AND condition
    (50) condition -> . condition OR condition
    (51) condition -> . function_call
    (52) condition -> . NOT condition
    (53) condition -> . TRUE
    (54) condition -> . FALSE
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    (               shift and go to state 145
    NOT             shift and go to state 146
    TRUE            shift and go to state 141
    FALSE           shift and go to state 147
    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    CMP_OP          reduce using rule 70 (constant -> .)
    IN              reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    STRING          shift and go to state 49
    [               shift and go to state 61
    ID              shift and go to state 15
    MLS             shift and go to state 26
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    mls                            shift and go to state 47
    function_call                  shift and go to state 143
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 144
    constant                       shift and go to state 60
    condition                      shift and go to state 166

state 147

    (54) condition -> FALSE .
    (73) constant -> FALSE .

    AND             reduce using rule 54 (condition -> FALSE .)
    OR              reduce using rule 54 (condition -> FALSE .)
    MLS             reduce using rule 54 (condition -> FALSE .)
    ENTITY          reduce using rule 54 (condition -> FALSE .)
    IMPLEMENT       reduce using rule 54 (condition -> FALSE .)
    IMPLEMENTATION  reduce using rule 54 (condition -> FALSE .)
    TYPEDEF         reduce using rule 54 (condition -> FALSE .)
    INDEX           reduce using rule 54 (condition -> FALSE .)
    CID             reduce using rule 54 (condition -> FALSE .)
    FOR             reduce using rule 54 (condition -> FALSE .)
    ID              reduce using rule 54 (condition -> FALSE .)
    $end            reduce using rule 54 (condition -> FALSE .)
    )               reduce using rule 54 (condition -> FALSE .)
    CMP_OP          reduce using rule 73 (constant -> FALSE .)
    IN              reduce using rule 73 (constant -> FALSE .)


state 148

    (33) implementation -> : mls stmt_list END .

    MLS             reduce using rule 33 (implementation -> : mls stmt_list END .)
    ENTITY          reduce using rule 33 (implementation -> : mls stmt_list END .)
    IMPLEMENT       reduce using rule 33 (implementation -> : mls stmt_list END .)
    IMPLEMENTATION  reduce using rule 33 (implementation -> : mls stmt_list END .)
    TYPEDEF         reduce using rule 33 (implementation -> : mls stmt_list END .)
    INDEX           reduce using rule 33 (implementation -> : mls stmt_list END .)
    CID             reduce using rule 33 (implementation -> : mls stmt_list END .)
    FOR             reduce using rule 33 (implementation -> : mls stmt_list END .)
    ID              reduce using rule 33 (implementation -> : mls stmt_list END .)
    $end            reduce using rule 33 (implementation -> : mls stmt_list END .)
    END             reduce using rule 33 (implementation -> : mls stmt_list END .)


state 149

    (75) param_list -> ID = operand , . param_list
    (75) param_list -> . ID = operand , param_list
    (76) param_list -> . ID = operand

    ID              shift and go to state 70

    param_list                     shift and go to state 167

state 150

    (36) relation -> class_ref ID multi REL multi class_ref . ID

    ID              shift and go to state 168


state 151

    (39) multi -> [ INT : INT . ]

    ]               shift and go to state 169


state 152

    (38) multi -> [ INT : ] .

    REL             reduce using rule 38 (multi -> [ INT : ] .)
    CID             reduce using rule 38 (multi -> [ INT : ] .)
    ID              reduce using rule 38 (multi -> [ INT : ] .)


state 153

    (40) multi -> [ : INT ] .

    REL             reduce using rule 40 (multi -> [ : INT ] .)
    CID             reduce using rule 40 (multi -> [ : INT ] .)
    ID              reduce using rule 40 (multi -> [ : INT ] .)


state 154

    (89) id_list -> ID , id_list .

    )               reduce using rule 89 (id_list -> ID , id_list .)


state 155

    (41) typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .
    (71) constant -> REGEX .

    MLS             reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    ENTITY          reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    IMPLEMENT       reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    IMPLEMENTATION  reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    TYPEDEF         reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    INDEX           reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    CID             reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    FOR             reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    ID              reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    $end            reduce using rule 41 (typedef -> TYPEDEF ID AS ns_ref MATCHING REGEX .)
    CMP_OP          reduce using rule 71 (constant -> REGEX .)
    IN              reduce using rule 71 (constant -> REGEX .)


state 156

    (42) typedef -> TYPEDEF ID AS ns_ref MATCHING condition .
    (49) condition -> condition . AND condition
    (50) condition -> condition . OR condition

    MLS             reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    ENTITY          reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    IMPLEMENT       reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    IMPLEMENTATION  reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    TYPEDEF         reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    INDEX           reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    CID             reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    FOR             reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    ID              reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    $end            reduce using rule 42 (typedef -> TYPEDEF ID AS ns_ref MATCHING condition .)
    AND             shift and go to state 161
    OR              shift and go to state 162


state 157

    (21) entity_body_outer -> mls entity_body END .

    MLS             reduce using rule 21 (entity_body_outer -> mls entity_body END .)
    ENTITY          reduce using rule 21 (entity_body_outer -> mls entity_body END .)
    IMPLEMENT       reduce using rule 21 (entity_body_outer -> mls entity_body END .)
    IMPLEMENTATION  reduce using rule 21 (entity_body_outer -> mls entity_body END .)
    TYPEDEF         reduce using rule 21 (entity_body_outer -> mls entity_body END .)
    INDEX           reduce using rule 21 (entity_body_outer -> mls entity_body END .)
    CID             reduce using rule 21 (entity_body_outer -> mls entity_body END .)
    FOR             reduce using rule 21 (entity_body_outer -> mls entity_body END .)
    ID              reduce using rule 21 (entity_body_outer -> mls entity_body END .)
    $end            reduce using rule 21 (entity_body_outer -> mls entity_body END .)


state 158

    (28) attr -> ns_ref ID = . constant
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (91) mls -> . MLS
    (92) mls -> . MLS mls

    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    END             reduce using rule 70 (constant -> .)
    ID              reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    TRUE            shift and go to state 43
    FALSE           shift and go to state 48
    STRING          shift and go to state 49
    MLS             shift and go to state 26

    constant                       shift and go to state 170
    mls                            shift and go to state 47

state 159

    (20) entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .

    MLS             reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    ENTITY          reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    IMPLEMENT       reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    IMPLEMENTATION  reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    TYPEDEF         reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    INDEX           reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    CID             reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    FOR             reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    ID              reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    $end            reduce using rule 20 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)


state 160

    (85) class_ref_list -> class_ref , class_ref_list .

    :               reduce using rule 85 (class_ref_list -> class_ref , class_ref_list .)


state 161

    (49) condition -> condition AND . condition
    (45) condition -> . ( condition )
    (46) condition -> . operand CMP_OP operand
    (47) condition -> . operand IN list_def
    (48) condition -> . operand IN var_ref
    (49) condition -> . condition AND condition
    (50) condition -> . condition OR condition
    (51) condition -> . function_call
    (52) condition -> . NOT condition
    (53) condition -> . TRUE
    (54) condition -> . FALSE
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    (               shift and go to state 145
    NOT             shift and go to state 146
    TRUE            shift and go to state 141
    FALSE           shift and go to state 147
    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    CMP_OP          reduce using rule 70 (constant -> .)
    IN              reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    STRING          shift and go to state 49
    [               shift and go to state 61
    ID              shift and go to state 15
    MLS             shift and go to state 26
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    mls                            shift and go to state 47
    function_call                  shift and go to state 143
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 144
    constant                       shift and go to state 60
    condition                      shift and go to state 171

state 162

    (50) condition -> condition OR . condition
    (45) condition -> . ( condition )
    (46) condition -> . operand CMP_OP operand
    (47) condition -> . operand IN list_def
    (48) condition -> . operand IN var_ref
    (49) condition -> . condition AND condition
    (50) condition -> . condition OR condition
    (51) condition -> . function_call
    (52) condition -> . NOT condition
    (53) condition -> . TRUE
    (54) condition -> . FALSE
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

    (               shift and go to state 145
    NOT             shift and go to state 146
    TRUE            shift and go to state 141
    FALSE           shift and go to state 147
    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    CMP_OP          reduce using rule 70 (constant -> .)
    IN              reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    STRING          shift and go to state 49
    [               shift and go to state 61
    ID              shift and go to state 15
    MLS             shift and go to state 26
    CID             shift and go to state 21

    var_ref                        shift and go to state 51
    class_ref                      shift and go to state 54
    list_def                       shift and go to state 56
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    mls                            shift and go to state 47
    function_call                  shift and go to state 143
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 144
    constant                       shift and go to state 60
    condition                      shift and go to state 172

state 163

    (47) condition -> operand IN . list_def
    (48) condition -> operand IN . var_ref
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID

    [               shift and go to state 61
    ID              shift and go to state 15

    ns_ref                         shift and go to state 174
    list_def                       shift and go to state 175
    var_ref                        shift and go to state 173

state 164

    (46) condition -> operand CMP_OP . operand
    (55) operand -> . constant
    (56) operand -> . function_call
    (57) operand -> . constructor
    (58) operand -> . list_def
    (59) operand -> . var_ref
    (60) operand -> . index_lookup
    (67) constant -> . INT
    (68) constant -> . FLOAT
    (69) constant -> . mls
    (70) constant -> .
    (71) constant -> . REGEX
    (72) constant -> . TRUE
    (73) constant -> . FALSE
    (74) constant -> . STRING
    (63) function_call -> . ns_ref ( )
    (64) function_call -> . ns_ref ( operand_list )
    (61) constructor -> . class_ref ( param_list )
    (62) constructor -> . class_ref ( )
    (65) list_def -> . [ operand_list ]
    (81) var_ref -> . var_ref . ID
    (82) var_ref -> . ns_ref
    (66) index_lookup -> . class_ref [ param_list ]
    (91) mls -> . MLS
    (92) mls -> . MLS mls
    (87) ns_ref -> . ns_ref SEP ID
    (88) ns_ref -> . ID
    (83) class_ref -> . CID
    (84) class_ref -> . ns_ref SEP CID

  ! shift/reduce conflict for MLS resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CID resolved as shift
    INT             shift and go to state 50
    FLOAT           shift and go to state 44
    AND             reduce using rule 70 (constant -> .)
    OR              reduce using rule 70 (constant -> .)
    ENTITY          reduce using rule 70 (constant -> .)
    IMPLEMENT       reduce using rule 70 (constant -> .)
    IMPLEMENTATION  reduce using rule 70 (constant -> .)
    TYPEDEF         reduce using rule 70 (constant -> .)
    INDEX           reduce using rule 70 (constant -> .)
    FOR             reduce using rule 70 (constant -> .)
    $end            reduce using rule 70 (constant -> .)
    )               reduce using rule 70 (constant -> .)
    REGEX           shift and go to state 55
    TRUE            shift and go to state 43
    FALSE           shift and go to state 48
    STRING          shift and go to state 49
    [               shift and go to state 61
    MLS             shift and go to state 26
    ID              shift and go to state 15
    CID             shift and go to state 21

  ! MLS             [ reduce using rule 70 (constant -> .) ]
  ! CID             [ reduce using rule 70 (constant -> .) ]
  ! ID              [ reduce using rule 70 (constant -> .) ]

    var_ref                        shift and go to state 51
    mls                            shift and go to state 47
    class_ref                      shift and go to state 54
    function_call                  shift and go to state 45
    ns_ref                         shift and go to state 46
    constructor                    shift and go to state 57
    list_def                       shift and go to state 56
    index_lookup                   shift and go to state 58
    operand                        shift and go to state 176
    constant                       shift and go to state 60

state 165

    (45) condition -> ( condition . )
    (49) condition -> condition . AND condition
    (50) condition -> condition . OR condition

    )               shift and go to state 177
    AND             shift and go to state 161
    OR              shift and go to state 162


state 166

    (52) condition -> NOT condition .
    (49) condition -> condition . AND condition
    (50) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MLS             reduce using rule 52 (condition -> NOT condition .)
    ENTITY          reduce using rule 52 (condition -> NOT condition .)
    IMPLEMENT       reduce using rule 52 (condition -> NOT condition .)
    IMPLEMENTATION  reduce using rule 52 (condition -> NOT condition .)
    TYPEDEF         reduce using rule 52 (condition -> NOT condition .)
    INDEX           reduce using rule 52 (condition -> NOT condition .)
    CID             reduce using rule 52 (condition -> NOT condition .)
    FOR             reduce using rule 52 (condition -> NOT condition .)
    ID              reduce using rule 52 (condition -> NOT condition .)
    $end            reduce using rule 52 (condition -> NOT condition .)
    )               reduce using rule 52 (condition -> NOT condition .)
    AND             shift and go to state 161
    OR              shift and go to state 162

  ! AND             [ reduce using rule 52 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 52 (condition -> NOT condition .) ]


state 167

    (75) param_list -> ID = operand , param_list .

    )               reduce using rule 75 (param_list -> ID = operand , param_list .)
    ]               reduce using rule 75 (param_list -> ID = operand , param_list .)


state 168

    (36) relation -> class_ref ID multi REL multi class_ref ID .

    MLS             reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)
    ENTITY          reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)
    IMPLEMENT       reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)
    IMPLEMENTATION  reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)
    TYPEDEF         reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)
    INDEX           reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)
    CID             reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)
    FOR             reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)
    ID              reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)
    $end            reduce using rule 36 (relation -> class_ref ID multi REL multi class_ref ID .)


state 169

    (39) multi -> [ INT : INT ] .

    REL             reduce using rule 39 (multi -> [ INT : INT ] .)
    CID             reduce using rule 39 (multi -> [ INT : INT ] .)
    ID              reduce using rule 39 (multi -> [ INT : INT ] .)


state 170

    (28) attr -> ns_ref ID = constant .

    END             reduce using rule 28 (attr -> ns_ref ID = constant .)
    ID              reduce using rule 28 (attr -> ns_ref ID = constant .)


state 171

    (49) condition -> condition AND condition .
    (49) condition -> condition . AND condition
    (50) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MLS             reduce using rule 49 (condition -> condition AND condition .)
    ENTITY          reduce using rule 49 (condition -> condition AND condition .)
    IMPLEMENT       reduce using rule 49 (condition -> condition AND condition .)
    IMPLEMENTATION  reduce using rule 49 (condition -> condition AND condition .)
    TYPEDEF         reduce using rule 49 (condition -> condition AND condition .)
    INDEX           reduce using rule 49 (condition -> condition AND condition .)
    CID             reduce using rule 49 (condition -> condition AND condition .)
    FOR             reduce using rule 49 (condition -> condition AND condition .)
    ID              reduce using rule 49 (condition -> condition AND condition .)
    $end            reduce using rule 49 (condition -> condition AND condition .)
    )               reduce using rule 49 (condition -> condition AND condition .)
    AND             shift and go to state 161
    OR              shift and go to state 162

  ! AND             [ reduce using rule 49 (condition -> condition AND condition .) ]
  ! OR              [ reduce using rule 49 (condition -> condition AND condition .) ]


state 172

    (50) condition -> condition OR condition .
    (49) condition -> condition . AND condition
    (50) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MLS             reduce using rule 50 (condition -> condition OR condition .)
    ENTITY          reduce using rule 50 (condition -> condition OR condition .)
    IMPLEMENT       reduce using rule 50 (condition -> condition OR condition .)
    IMPLEMENTATION  reduce using rule 50 (condition -> condition OR condition .)
    TYPEDEF         reduce using rule 50 (condition -> condition OR condition .)
    INDEX           reduce using rule 50 (condition -> condition OR condition .)
    CID             reduce using rule 50 (condition -> condition OR condition .)
    FOR             reduce using rule 50 (condition -> condition OR condition .)
    ID              reduce using rule 50 (condition -> condition OR condition .)
    $end            reduce using rule 50 (condition -> condition OR condition .)
    )               reduce using rule 50 (condition -> condition OR condition .)
    AND             shift and go to state 161
    OR              shift and go to state 162

  ! AND             [ reduce using rule 50 (condition -> condition OR condition .) ]
  ! OR              [ reduce using rule 50 (condition -> condition OR condition .) ]


state 173

    (48) condition -> operand IN var_ref .
    (81) var_ref -> var_ref . . ID

    AND             reduce using rule 48 (condition -> operand IN var_ref .)
    OR              reduce using rule 48 (condition -> operand IN var_ref .)
    MLS             reduce using rule 48 (condition -> operand IN var_ref .)
    ENTITY          reduce using rule 48 (condition -> operand IN var_ref .)
    IMPLEMENT       reduce using rule 48 (condition -> operand IN var_ref .)
    IMPLEMENTATION  reduce using rule 48 (condition -> operand IN var_ref .)
    TYPEDEF         reduce using rule 48 (condition -> operand IN var_ref .)
    INDEX           reduce using rule 48 (condition -> operand IN var_ref .)
    CID             reduce using rule 48 (condition -> operand IN var_ref .)
    FOR             reduce using rule 48 (condition -> operand IN var_ref .)
    ID              reduce using rule 48 (condition -> operand IN var_ref .)
    $end            reduce using rule 48 (condition -> operand IN var_ref .)
    )               reduce using rule 48 (condition -> operand IN var_ref .)
    .               shift and go to state 41


state 174

    (82) var_ref -> ns_ref .
    (87) ns_ref -> ns_ref . SEP ID

    .               reduce using rule 82 (var_ref -> ns_ref .)
    AND             reduce using rule 82 (var_ref -> ns_ref .)
    OR              reduce using rule 82 (var_ref -> ns_ref .)
    MLS             reduce using rule 82 (var_ref -> ns_ref .)
    ENTITY          reduce using rule 82 (var_ref -> ns_ref .)
    IMPLEMENT       reduce using rule 82 (var_ref -> ns_ref .)
    IMPLEMENTATION  reduce using rule 82 (var_ref -> ns_ref .)
    TYPEDEF         reduce using rule 82 (var_ref -> ns_ref .)
    INDEX           reduce using rule 82 (var_ref -> ns_ref .)
    CID             reduce using rule 82 (var_ref -> ns_ref .)
    FOR             reduce using rule 82 (var_ref -> ns_ref .)
    ID              reduce using rule 82 (var_ref -> ns_ref .)
    $end            reduce using rule 82 (var_ref -> ns_ref .)
    )               reduce using rule 82 (var_ref -> ns_ref .)
    SEP             shift and go to state 117


state 175

    (47) condition -> operand IN list_def .

    AND             reduce using rule 47 (condition -> operand IN list_def .)
    OR              reduce using rule 47 (condition -> operand IN list_def .)
    MLS             reduce using rule 47 (condition -> operand IN list_def .)
    ENTITY          reduce using rule 47 (condition -> operand IN list_def .)
    IMPLEMENT       reduce using rule 47 (condition -> operand IN list_def .)
    IMPLEMENTATION  reduce using rule 47 (condition -> operand IN list_def .)
    TYPEDEF         reduce using rule 47 (condition -> operand IN list_def .)
    INDEX           reduce using rule 47 (condition -> operand IN list_def .)
    CID             reduce using rule 47 (condition -> operand IN list_def .)
    FOR             reduce using rule 47 (condition -> operand IN list_def .)
    ID              reduce using rule 47 (condition -> operand IN list_def .)
    $end            reduce using rule 47 (condition -> operand IN list_def .)
    )               reduce using rule 47 (condition -> operand IN list_def .)


state 176

    (46) condition -> operand CMP_OP operand .

    AND             reduce using rule 46 (condition -> operand CMP_OP operand .)
    OR              reduce using rule 46 (condition -> operand CMP_OP operand .)
    MLS             reduce using rule 46 (condition -> operand CMP_OP operand .)
    ENTITY          reduce using rule 46 (condition -> operand CMP_OP operand .)
    IMPLEMENT       reduce using rule 46 (condition -> operand CMP_OP operand .)
    IMPLEMENTATION  reduce using rule 46 (condition -> operand CMP_OP operand .)
    TYPEDEF         reduce using rule 46 (condition -> operand CMP_OP operand .)
    INDEX           reduce using rule 46 (condition -> operand CMP_OP operand .)
    CID             reduce using rule 46 (condition -> operand CMP_OP operand .)
    FOR             reduce using rule 46 (condition -> operand CMP_OP operand .)
    ID              reduce using rule 46 (condition -> operand CMP_OP operand .)
    $end            reduce using rule 46 (condition -> operand CMP_OP operand .)
    )               reduce using rule 46 (condition -> operand CMP_OP operand .)


state 177

    (45) condition -> ( condition ) .

    AND             reduce using rule 45 (condition -> ( condition ) .)
    OR              reduce using rule 45 (condition -> ( condition ) .)
    MLS             reduce using rule 45 (condition -> ( condition ) .)
    ENTITY          reduce using rule 45 (condition -> ( condition ) .)
    IMPLEMENT       reduce using rule 45 (condition -> ( condition ) .)
    IMPLEMENTATION  reduce using rule 45 (condition -> ( condition ) .)
    TYPEDEF         reduce using rule 45 (condition -> ( condition ) .)
    INDEX           reduce using rule 45 (condition -> ( condition ) .)
    CID             reduce using rule 45 (condition -> ( condition ) .)
    FOR             reduce using rule 45 (condition -> ( condition ) .)
    ID              reduce using rule 45 (condition -> ( condition ) .)
    $end            reduce using rule 45 (condition -> ( condition ) .)
    )               reduce using rule 45 (condition -> ( condition ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MLS in state 26 resolved as shift
WARNING: shift/reduce conflict for ) in state 27 resolved as shift
WARNING: shift/reduce conflict for MLS in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for CID in state 40 resolved as shift
WARNING: shift/reduce conflict for MLS in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for CID in state 164 resolved as shift
WARNING: shift/reduce conflict for AND in state 166 resolved as shift
WARNING: shift/reduce conflict for OR in state 166 resolved as shift
WARNING: shift/reduce conflict for AND in state 171 resolved as shift
WARNING: shift/reduce conflict for OR in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 172 resolved as shift
WARNING: shift/reduce conflict for OR in state 172 resolved as shift
